language: cpp

env:
  global:
    - secure: "ChCJe8+CMCJdFcCAtk9o2LsLj/DaZCHykTq1NokqpjxHeEr6Lo03FjXRl3jSu9jwOLSJiH05jTjkmbsuIxAsZWFMLRY7X1rc+Z282uQ/GTUCecSpMjKHly2UUjaCtQbTikqDgqbUQAcll2cKHngJ5u1lzLmdLRtICoNaOQO4Ei9gHz1xacybPepJFjUpxRzABkjj7XVKxMx+MSkKNl7AVljaGN0flyQVTrdHifT7AOSoNVyl96J0Xxinzt6BDat2zj3nAMeEP5DGByaKx1Ef2SvaqtLyzl7UfOw9kr7oHOsxRfKXGnfLCXyRYu5jWklxLQUIRRDO4IRbvXsqCgyTzrewGzg+pjn9Iv0C6gyVCnosZ6x7BnWnYpkSoCyiLbjaCxBUCFKHqXEqYXDcrq9zPGKrGcN+NIpkdp3BkniLsvg9CQNLByl90is/6iSeiIxcKlIdq30fPjGlmX0T+pM68wNL749xpUeBp5SJhbKV2xHXKFJassNpr9HRMmEWGwTVJuXZ9Oi81WZFcoSj7TERDE5A78ThckBDASLB9SglIFKDbapqrPt6K4ArB+87vcCJ3F6GT7DyBHoLoWKiwig/BOka+r1Xb+Qb7wqX2VA4hxe+ORwuhUzvyguGB0BgdsEwUCKqWrGPlS8Qrf+HYX4jji7ng/hB4haiJd27XG5HepM="
    - secure: "N/DlgYl7l0jGCaYdlsyGXKdlm1w+8cbcYdoQrlI36PxwE26FHQQraxWpNF9X2VZ9DfVzOc9rj+3bJU9iAfPc5PiGJONCj/KnUGJ6Rk2V/Vlo4RvP6GPmQUK8OvgO2B/zCPn6X8ry466MgLw1p634B+ARJZ0AzHLR/qp5Li2gHSpZ7qHl4Z4GsBTMBd8hBFkFZKqz7xsTSRJSvPtjR3OPK+eC9x3eyMpqxqTkM264JfS+Fo5k8CUB/IUz6SVK2hA2JUHKis7MnaquSAufACEyU3I7LNKDQTXTlfsVNF/9YRSNuugkemzX8U9XKwqHOuksH9442RmFbrl2A8oKafN3oJjyhjgbt9yEsCjPwz2efcs08h6aHRrAq4FOQqs2ECPXr1os/99em2nAJv2hhN12nJvhbwrNGaxAg8GiarEkNYcWSklgCQcV0Vzuz/P1Mm6ObgaeUzU9qydhkR2eN7jw7d22vM87evIqDNuKwd/KmYbCbQmugNu6La4TCdPOyq+OnZF4QhHnGDkzErx8i5FakRm2Vf0vi4Mi1h7oliu8ZrrC2Sk+iqLLaW3vUrROwxLV2pfskzscdCHV0GzUJkKAC1FFkYJR8kloOL/M9NcYHQCO4o+BacKK61Y+dS0tV6kztl7FB2/ZPaXzkvp7ad2xGz9YhUscVBIBHGT712hp5cs="
    - secure: "K5bXqKsq9xWMhzUtjtn2/cfwtzNrbhKJtYXarxsIjLHWZbUG6h5TD/MVNYqI2b1XlGSjtregsZ9+/Qh/iSss0BWuuRin7yvZ5z6wusjNIiLKTJQOXWVzFIlN3Bb+Dq/xwNzsC242md3nbC0qiqrrczmh90yCwrvaxGVOQoVQIQpulJtUGF51cladNaAPXIB+jESe5/EH5BpEjqko+971mhnr5QveSjFAdMsd+AeX1ZLkfiy6iiFkjucHl+6ZkUPHk9ArEdJ7p7GL6RZYS0IoMsD4XZ7BRytRi9EWQeqWyM6unAj68dwZVZpB+BvJluU3cYW6e5GwuQs7mODn8OGz4sK14LbSzZCH2zMQ4nuqpnD9Z2YEJ+P650TWdwtWPfOSEM13kI3wV/kScYe7wAveb+85StySyr1tG+7WWb31aQrbG78cMAbEcd9Ib/Y7pZGBNPbgq/islwTXmACHJXouc67VTIXloGq8KdO2eRKEBFpKxKPEiNC3PkY7BxL/aCm+wfcETt8RkdZDI6d6Yc5oZapUo20YjNVz/yikiXu3bTUPpgRH5wVgTNEynOC+BMqcyza+wHvS6cp7UIwJinmIywgVbXW8BppyWJerwIhI468wT+qBwsyXmVOavbjb725XJPEk5NUUWLJlIbRHw3WVeM672trPve4xzTpX05KgGec="
    - secure: "UmhdazfnTklI5cBBXwdxbXBdNL649m45WeyM3YapemaS0JOn83hY8XEiOfsXHk82ChDMxdIfC/L55R06jzgUjaZOb2MRWyUTFmzuCWhfDqy/IgbjPUIz2A/P0oKwUy8lMibCpsnaYp0Ztuo0l0VTEexwUZ7ZZadvm4bhKXGR8OZtN1DwDHFoO9zVf/TDZfM2MUFbv0ih6m8quoP8QY/A9a+sdWBXYlgTN3LiaiMQqY+IkECKkM1VxWSfWQEV7Dki3NQW4oL5eHeEE8k/eZZ2jPKCjl6DS1DTrL+dutXT4/RDDpxt3zmPVePd9n3+HPiutyQS03KF9eckX4tXgeeWG2dCFTJ8+BnkVaFH86hmodOBQRb5NhhxMQdX0nax4fyqWKddzuYYFGd04EINWfCsRb5InkgiIl3x2aCcZoTt1GzQVadSI32ka3Ju0BZsVxvvagJo1ZPju29SBZxuCyXVPMhA+2aTlOOF96tMIzVg21aBKc7fKLT1Rl2VKV1qyP3sIJFSVBa9gYDuPpW1aTyMkQz0Jrl+MoyGp59qAxY+teKYbkWz5Xq+s8AIs2tAmX6n7B9w2RmrwVKPRPSjGpSmJnA1LKJXBst4UFt8kFSw4iLnDH5LlxfVkR84LitiWyyk2YxxbvoHBSv3ShMcYTMGQTCfOyRaTLGtbGFxI7g92cs="
    - secure: "u7kndpcrKB3EJqsoqVNeF6sUH5hFy2100h1rQTmVLyfdbBp6rkjncYCGkxORxe6DtIi9bP7/ALO7BfkQsixa0evmHY2bVMlzarQMztIRnotpAMaJcAfE43TzpkHX5IHU5vSZBWKeBxsIW7hNYlZqqDjmzZUZhOuUzFYkRYq55QX0YG7+4bmaCoHe4rRLiqabdBvaPn6hxmPQaxaI6z0YgGkVCNPdLjdcm5iA+MZLtwDBbblIm7tUhrkA7Z92WcjJH1LZ+K0P+jV5OL3Z3l3/mS6RIIre3VyYA+PCBzALf3ZTOeujFDyzYF0gSPHCZfHNDGrF0yJtuSnSQjkCtMoYw3xW8xYSau13ufSE/M0EFmIpJRXZLcVcep48R6Sl9VzGCBCiiTCyAFMmCFMBAhm0e90qlA5eNwn161cMd7JZ55WUJ/+VBlQplH0nOXRK6BESnID64O0HYveWENy9HprvBURMYXSB2AdOMSyjPYqPNIhIVwpImoWd/GlHIG6QZ9ElOeK5UQKYODBMc2Ratdl6W7iEgmDVrzbyuy+fOuST533izNcbgTaVyXWAbYKCMkw5F/VufgLFeFoavKhYfRjHoTzeqKbTbWxXDgELpsWPXUlMHvVnc38TsMszi2CuWa3W5KaEHh51SHNxwFDA6jjvcAUTiusNrmprMnpQlCNC1sQ="
    - secure: "kKMUFQ/O3AY31oez2UwKDGg7toxkr73FZBeYSV/WYhI8gYLC+GBZoxFuolJ74trRSnj6kYMSMZSzESRrn5pyvqAiZ75yN5s4zIyke7l5X4GiOtuUmFe4HdVxNKW2ijI3soOx1/lNTI2grXTZPw1WslQhsMuGzePn6xeQz69GkfETxKDiUl1/jEdD/udl7RP2Kbjb5l/q6hgU++QPYnWzAdv5tManRbl9ShO/gzcuSxvRKSFM1QZJYBo7bo2eSD8w69VaPcoAA7C+o43XHU2FXLL8AxJ9rJO4F8ZPTnL8cGMd1At5K7aKPX7fVHMASWxXmvJCT6MfTCw0lkQzG85oLGZUyGQzxfLl+zgyYvZsr60BHsgGN+b7DgEZHMQLNjBoo3iB1Yezsz4zDeHVpPA00h1iSxkXx5Pg61rXuHfsFrGhK28UPjZOT0ABfrheoH3z7XSRhkvww/E2jOUcdRSPnxg5MryvbEW41b5BXfn05ufgrf/5+qpULScVFtHiSomibzSQZbZc9bjMFsMfD9/yCAzHfrmYnGWU610VFQSQUm70RZUT54HLRBQ0AnQLAPrOPDLxb9CzQ8ds2m1XAJnFi4MWhYzP2PEFmbcFCWsPeVNBr1FMgJBbPpQtqXInopQrZXtlPFXgTbQQpdVTosoPYBeBofrwyEp8RXTEdJcMxyI="
    - secure: "hFoUcipihN0bBHKV134nCZJUvMZA4kUv7UT/25XKvckdjDm8X9UgLn5IQFXdkglvXXy5i8eXBV13/eCdxcEvU98yHpHQw7Ldal6b2a5u3C+UkL3n/ziOlvdGvPGfadYss3BMeYzsrHEOcJTTT3c9zLDUK9WsNN92tUDYUxqCOPLweEefmL8CKtXgfpm5Z3q12dRhbPU5G8hB7q/sXtpjtwxvNgU7YL/Oo21g3f8UImoywgBlNcKFaPxVTzRzlqPBmw3anIDB//bJl8sU4iwfdyB2MpbOIZqmHICa0pPjA0E8bCdMO4Truw+DY45qkYG0+j+i8+phH+fa4D/d8tqbCwAVyuH/yeXEvk1eQTujKTeTM+TfV930zF2GxtqnHP1eMveDbvOxMHJpecDfnV2ma62r6WVarEEUU7mS4BlIBBeo7a6BxlEUNnoEmQFR3JKL6ii062LbwP0FDRZw9vJumcYYdp/HCsccrsKgtrWI43eGeaQ8gVbpZxeTc5MG7pwX4YzFbSvdG4ZEjn6Qlm8ZC8QPgR87A5skoBAhf7LwthCrH/w8jj1hVWZwlGKn4LbLnTWdV2M8wIItEi8nhcScs/WqAfsQvc7bUWc1fR/5V+zx6Mk+0ex5XX6PhecnlOZ4sJkY7JYGWKPbBKu5T6W4HrPsp0Chz7zh48qWUfYP2QY="

jobs:
  include:
    - stage: test
      name: Linux MaBoSS tests
      
      os: linux
      dist: xenial

      before_install:
        - sudo pip install numpy

      install:
        - bash -c "cd engine/src; make install; make MAXNODES=128 install"
        
      script:
        - bash -c "cd engine/tests; bash ./test-cellcycle.sh"
        - bash -c "cd engine/tests; bash ./test-ensemble.sh"
        - bash -c "cd engine/tests; bash ./test-ewing.sh"
        - bash -c "cd engine/tests; bash ./test-server.sh"
        - bash -c "cd engine/tests; bash ./test-user_func.sh"
        - bash -c "cd engine/tests; bash ./test-prngs.sh"


    - stage: test
      name: MacOSX MaBoSS tests

      os: osx

      before_install:
        - brew install flex bison;
        - pip install numpy;

      install:
        - bash -c "cd engine/src; make install; make MAXNODES=128 install"
        
      script:
        - bash -c "cd engine/tests; bash ./test-cellcycle.sh"
        - bash -c "cd engine/tests; bash ./test-ensemble.sh"
        - bash -c "cd engine/tests; bash ./test-ewing.sh"
        - bash -c "cd engine/tests; bash ./test-server.sh"
        - bash -c "cd engine/tests; bash ./test-user_func.sh"
        - bash -c "cd engine/tests; bash ./test-prngs.sh"


    - stage: test
      name: MaBoSS-server docker test

      os: linux
      dist: xenial
      services: docker
      python: 3.8

      before_install:
        - sudo apt-get -qq update
        - sudo apt-get install -yq python3-pip python3-setuptools
        - sudo pip3 install -U docker-compose
        - sudo pip install numpy

      install:
        - docker-compose up -d maboss-server
        - bash -c "cd engine/src; make"

      script:
        - bash -c "cd engine/tests; bash ./test-container.sh"


    - stage: test
      name: MaBoSS-server singularity test

      os: linux
      dist: xenial
      services: docker
      python: 3.8

      before_install:
        - wget -O- http://neuro.debian.net/lists/xenial.us-ca.full | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list
        - sudo apt-get -qq update
        - sudo apt-get install -yq --allow-unauthenticated python-virtualenv singularity-container debootstrap
        - sudo pip install numpy

      install:
        - sudo singularity build maboss-server.simg containers/singularity/Singularity
        - singularity run maboss-server.simg & 
        - bash -c "cd engine/src; make"

      script:
        - bash -c "cd engine/tests; bash ./test-container.sh"


    - stage: test
      name: Linux cMaBoSS tests

      os: linux
      dist: xenial
      python: 3.8

      install:
        - bash -c "cd engine/src; make;"
        - bash -c "cd engine/python; cp -r ../src .; python3 setup.py build_ext --inplace"
      
      script:
        - bash -c "cd engine/python; python3 -m unittest test"
        - bash -c "cd engine/python; python3 -m unittest test_128n"


    - stage: test
      name: MacOSX cMaBoSS tests

      os: osx

      before_install:
        - brew install flex bison
        - FULL_PYTHON_VERSION=`pyenv install -l | sed 's/ *//' | grep -e "^3.8\.[0-9]*$" | tail -n 1`
        - CONFIGURE_OPTS="--with-openssl=$(brew --prefix openssl)" pyenv install $FULL_PYTHON_VERSION
      
      install:
        - bash -c "cd engine/src; make"
        - bash -c "cd engine/python; cp -r ../src ."
        - cd engine/python;
        - /Users/travis/.pyenv/versions/$FULL_PYTHON_VERSION/bin/python3 setup.py build_ext --inplace

      script:
        - bash -c "/Users/travis/.pyenv/versions/$FULL_PYTHON_VERSION/bin/python3 -m unittest test"
        - bash -c "/Users/travis/.pyenv/versions/$FULL_PYTHON_VERSION/bin/python3 -m unittest test_128n"


    - stage: deploy
      if: type != pull_request
      name: MaBoSS-server docker hub image update

      os: linux
      python: 3.8
      dist: xenial
      
      install:
        - if [ $TRAVIS_REPO_SLUG = "vincent-noel/MaBoSS-env-2.0" ]; then
            echo "$DOCKER_HUB_PASSWORD" | docker login --username vnoel --password-stdin;

          elif [ $TRAVIS_REPO_SLUG = "sysbio-curie/MaBoSS-env-2.0" ]; then
            echo "$DOCKER_HUB_PASSWORD_SYSBIO_CURIE" | docker login --username vnoel --password-stdin;
            
          fi
        - sudo apt-get -qq update
        - sudo apt-get install -yq python3-pip python3-setuptools
        - sudo pip3 install -U docker-compose

      script:
        - docker-compose build maboss-server

      after_success:
        - docker tag maboss-server:latest vnoel/maboss-server:latest
        - docker push vnoel/maboss-server:latest
        - docker tag maboss-server:latest sysbiocurie/maboss-server:latest
        - docker push sysbiocurie/maboss-server:latest


    - stage: deploy
      if: type != pull_request
      name: MaBoSS-server singularity image upload

      os: linux
      python: 3.8
      dist: xenial

      install:
        - wget -O- http://neuro.debian.net/lists/xenial.us-ca.full | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list
        - sudo apt-get -qq update
        - sudo apt-get install -yq --allow-unauthenticated python-virtualenv singularity-container debootstrap
      
      script: 
        - sudo singularity build maboss-server.simg containers/singularity/Singularity


    - stage: deploy
      if: type != pull_request
      name: Linux MaBoSS upload on Anaconda cloud

      os: linux
      dist: xenial
      
      install:
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
        - bash miniconda.sh -b -p $HOME/miniconda
        - export PATH="$HOME/miniconda/bin:$PATH"
        - hash -r
        - conda config --set always_yes yes --set changeps1 no
        - conda update -q conda
        - conda install conda-build
        - conda install anaconda-client

      script:
        - if [ $TRAVIS_REPO_SLUG = 'vincent-noel/MaBoSS-env-2.0' ]; then
            sed -i "s|sysbio-curie|vincent-noel|" conda/maboss/meta.yaml;
            sed -ie "s|v{{\sversion\s}}|$TRAVIS_BRANCH|" conda/maboss/meta.yaml;
            sed -i "s|git_rev|git_tag|" conda/maboss/meta.yaml;
            conda build conda/maboss;
            anaconda -t $CONDA_UPLOAD_TOKEN upload -u vincent-noel $HOME/miniconda/conda-bld/$TRAVIS_OS_NAME-64/*.tar.bz2 --force;

          elif [[ $TRAVIS_REPO_SLUG = 'sysbio-curie/MaBoSS-env-2.0' && $TRAVIS_TAG != '' ]]; then
            conda build conda/maboss;
            anaconda -t $CONDA_UPLOAD_TOKEN_SYSBIO_CURIE upload -u sysbio-curie $HOME/miniconda/conda-bld/$TRAVIS_OS_NAME-64/*.tar.bz2 --force;
            
          elif [[ $TRAVIS_REPO_SLUG = 'maboss-bkmc/MaBoSS-env-2.0' && $TRAVIS_TAG != '' ]]; then
            conda build conda/maboss;
            anaconda -t $CONDA_UPLOAD_TOKEN_BKMC upload -u colomoto $HOME/miniconda/conda-bld/$TRAVIS_OS_NAME-64/*.tar.bz2 --force;
            
          fi

    - stage: deploy
      if: type != pull_request
      name: MacOSX MaBoSS upload on Anaconda cloud

      os: osx
      
      install:
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O ~/miniconda.sh;
        - bash ~/miniconda.sh -b -p $HOME/miniconda
        - export PATH="$HOME/miniconda/bin:$PATH"
        - hash -r
        - conda config --set always_yes yes --set changeps1 no
        - conda update -q conda
        - conda install conda-build
        - conda install anaconda-client

      script:
        - if [ $TRAVIS_REPO_SLUG = 'vincent-noel/MaBoSS-env-2.0' ]; then
            sed -i '' "s|sysbio-curie|vincent-noel|" conda/maboss/meta.yaml;
            sed -i '' -e "s|v{{[[:space:]]version[[:space:]]}}|$TRAVIS_BRANCH|" conda/maboss/meta.yaml;
            sed -i '' "s|git_rev|git_tag|" conda/maboss/meta.yaml;
            conda build conda/maboss;
            anaconda -t $CONDA_UPLOAD_TOKEN upload -u vincent-noel $HOME/miniconda/conda-bld/$TRAVIS_OS_NAME-64/*.tar.bz2 --force;
          
          elif [[ $TRAVIS_REPO_SLUG = 'sysbio-curie/MaBoSS-env-2.0' && $TRAVIS_TAG != '' ]]; then
            conda build conda/maboss;
            anaconda -t $CONDA_UPLOAD_TOKEN_SYSBIO_CURIE upload -u sysbio-curie $HOME/miniconda/conda-bld/$TRAVIS_OS_NAME-64/*.tar.bz2 --force;
          
          elif [[ $TRAVIS_REPO_SLUG = 'maboss-bkmc/MaBoSS-env-2.0' && $TRAVIS_TAG != '' ]]; then
            conda build conda/maboss;
            anaconda -t $CONDA_UPLOAD_TOKEN_BKMC upload -u colomoto $HOME/miniconda/conda-bld/$TRAVIS_OS_NAME-64/*.tar.bz2 --force;
          
          fi

    - stage: deploy
      if: type != pull_request
      name: Linux cMaBoSS upload on pypi

      os: linux
      dist: xenial
      services: docker
      
      install:
        - bash -c "cd engine/src; make"
        - bash -c "cd engine/python; cp -r ../src ."
        - sudo pip install twine
      
      script:
        - cd engine/python
        - docker run --rm -e PLAT=manylinux1_x86_64 -v `pwd`:/io quay.io/pypa/manylinux1_x86_64 /io/build-wheels.sh

      after_success:
        - if [ $TRAVIS_REPO_SLUG = "vincent-noel/MaBoSS-env-2.0" ]; then
            twine upload -u vincent-noel -p $PYPI_PASS --skip-existing wheelhouse/*;

          elif [ $TRAVIS_REPO_SLUG = "sysbio-curie/MaBoSS-env-2.0" ]; then
            twine upload -u vincent-noel -p $PYPI_PASS_SYSBIO_CURIE --skip-existing wheelhouse/*;

          fi


    - stage: deploy
      if: type != pull_request
      name: MacOSX cMaBoSS upload on pypi

      os: osx
      
      install:
        - bash -c "cd engine/src; make"
        - bash -c "cd engine/python; cp -r ../src ."
        
        - FULL_PYTHON_VERSION=`pyenv install -l | sed 's/ *//' | grep -e "^3.5\.[0-9]*$" | tail -n 1` 
        - CONFIGURE_OPTS="--with-openssl=$(brew --prefix openssl)" pyenv install $FULL_PYTHON_VERSION
        - /Users/travis/.pyenv/versions/$FULL_PYTHON_VERSION/bin/pip install wheel twine
        
        - FULL_PYTHON_VERSION=`pyenv install -l | sed 's/ *//' | grep -e "^3.6\.[0-9]*$" | tail -n 1` 
        - CONFIGURE_OPTS="--with-openssl=$(brew --prefix openssl)" pyenv install $FULL_PYTHON_VERSION
        - /Users/travis/.pyenv/versions/$FULL_PYTHON_VERSION/bin/pip install wheel twine
        
        - FULL_PYTHON_VERSION=`pyenv install -l | sed 's/ *//' | grep -e "^3.7\.[0-9]*$" | tail -n 1` 
        - CONFIGURE_OPTS="--with-openssl=$(brew --prefix openssl)" pyenv install $FULL_PYTHON_VERSION
        - /Users/travis/.pyenv/versions/$FULL_PYTHON_VERSION/bin/pip install wheel twine
        
        - FULL_PYTHON_VERSION=`pyenv install -l | sed 's/ *//' | grep -e "^3.8\.[0-9]*$" | tail -n 1` 
        - CONFIGURE_OPTS="--with-openssl=$(brew --prefix openssl)" pyenv install $FULL_PYTHON_VERSION
        - /Users/travis/.pyenv/versions/$FULL_PYTHON_VERSION/bin/pip install wheel twine

      script:
        - cd engine/python
        
        - FULL_PYTHON_VERSION=`pyenv install -l | sed 's/ *//' | grep -e "^3.5\.[0-9]*$" | tail -n 1` 
        - /Users/travis/.pyenv/versions/$FULL_PYTHON_VERSION/bin/pip wheel . -w wheelhouse
        
        - FULL_PYTHON_VERSION=`pyenv install -l | sed 's/ *//' | grep -e "^3.6\.[0-9]*$" | tail -n 1` 
        - /Users/travis/.pyenv/versions/$FULL_PYTHON_VERSION/bin/pip wheel . -w wheelhouse
        
        - FULL_PYTHON_VERSION=`pyenv install -l | sed 's/ *//' | grep -e "^3.7\.[0-9]*$" | tail -n 1` 
        - /Users/travis/.pyenv/versions/$FULL_PYTHON_VERSION/bin/pip wheel . -w wheelhouse
        
        - FULL_PYTHON_VERSION=`pyenv install -l | sed 's/ *//' | grep -e "^3.8\.[0-9]*$" | tail -n 1` 
        - /Users/travis/.pyenv/versions/$FULL_PYTHON_VERSION/bin/pip wheel . -w wheelhouse

      after_success:

        - if [ $TRAVIS_REPO_SLUG = "vincent-noel/MaBoSS-env-2.0" ]; then
            /Users/travis/.pyenv/versions/$FULL_PYTHON_VERSION/bin/twine upload -u vincent-noel -p $PYPI_PASS --skip-existing wheelhouse/*;
          
          elif [ $TRAVIS_REPO_SLUG = "sysbio-curie/MaBoSS-env-2.0" ]; then
            /Users/travis/.pyenv/versions/$FULL_PYTHON_VERSION/bin/twine upload -u vincent-noel -p $PYPI_PASS_SYSBIO_CURIE --skip-existing wheelhouse/*;

          fi


    - stage: deploy
      if: type != pull_request
      name: Linux cMaBoSS upload on Anaconda cloud

      os: linux
      dist: xenial
      
      install:
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
        - bash miniconda.sh -b -p $HOME/miniconda
        - export PATH="$HOME/miniconda/bin:$PATH"
        - hash -r
        - conda config --set always_yes yes --set changeps1 no
        - conda update -q conda
        - conda install conda-build
        - conda install anaconda-client

      script:
        - if [ $TRAVIS_REPO_SLUG = 'vincent-noel/MaBoSS-env-2.0' ]; then
            sed -i "s|sysbio-curie|vincent-noel|" conda/cmaboss/meta.yaml;
            sed -ie "s|release|$TRAVIS_BRANCH|" conda/cmaboss/meta.yaml;
            sed -i "s|git_rev|git_tag|" conda/cmaboss/meta.yaml;
            conda build conda/cmaboss;
            anaconda -t $CONDA_UPLOAD_TOKEN upload -u vincent-noel $HOME/miniconda/conda-bld/$TRAVIS_OS_NAME-64/*.tar.bz2 --force;

          elif [[ $TRAVIS_REPO_SLUG = 'sysbio-curie/MaBoSS-env-2.0' && $TRAVIS_TAG != '' ]]; then
            sed -ie "s|release|$TRAVIS_TAG|" conda/cmaboss/meta.yaml;
            conda build conda/cmaboss;
            anaconda -t $CONDA_UPLOAD_TOKEN_SYSBIO_CURIE upload -u sysbio-curie $HOME/miniconda/conda-bld/$TRAVIS_OS_NAME-64/*.tar.bz2 --force;
            
          elif [[ $TRAVIS_REPO_SLUG = 'maboss-bkmc/MaBoSS-env-2.0' && $TRAVIS_TAG != '' ]]; then
            sed -ie "s|release|$TRAVIS_TAG|" conda/cmaboss/meta.yaml;
            conda build conda/cmaboss;
            anaconda -t $CONDA_UPLOAD_TOKEN_BKMC upload -u colomoto $HOME/miniconda/conda-bld/$TRAVIS_OS_NAME-64/*.tar.bz2 --force;
            
          fi

    - stage: deploy
      if: type != pull_request
      name: MacOSX cMaBoSS upload on Anaconda cloud

      os: osx
      
      install:
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O ~/miniconda.sh;
        - bash ~/miniconda.sh -b -p $HOME/miniconda
        - export PATH="$HOME/miniconda/bin:$PATH"
        - hash -r
        - conda config --set always_yes yes --set changeps1 no
        - conda update -q conda
        - conda install conda-build
        - conda install anaconda-client

      script:
        - if [ $TRAVIS_REPO_SLUG = 'vincent-noel/MaBoSS-env-2.0' ]; then
            sed -i '' "s|sysbio-curie|vincent-noel|" conda/cmaboss/meta.yaml;
            sed -i '' -e "s|release|$TRAVIS_BRANCH|" conda/cmaboss/meta.yaml;
            sed -i '' "s|git_rev|git_tag|" conda/cmaboss/meta.yaml;
            conda build conda/cmaboss;
            anaconda -t $CONDA_UPLOAD_TOKEN upload -u vincent-noel $HOME/miniconda/conda-bld/$TRAVIS_OS_NAME-64/*.tar.bz2 --force;
          
          elif [[ $TRAVIS_REPO_SLUG = 'sysbio-curie/MaBoSS-env-2.0' && $TRAVIS_TAG != '' ]]; then
            sed -i '' -e "s|release|$TRAVIS_TAG|" conda/cmaboss/meta.yaml;
            conda build conda/cmaboss;
            anaconda -t $CONDA_UPLOAD_TOKEN_SYSBIO_CURIE upload -u sysbio-curie $HOME/miniconda/conda-bld/$TRAVIS_OS_NAME-64/*.tar.bz2 --force;
          
          elif [[ $TRAVIS_REPO_SLUG = 'maboss-bkmc/MaBoSS-env-2.0' && $TRAVIS_TAG != '' ]]; then
            sed -i '' -e "s|release|$TRAVIS_TAG|" conda/cmaboss/meta.yaml;
            conda build conda/cmaboss;
            anaconda -t $CONDA_UPLOAD_TOKEN_BKMC upload -u colomoto $HOME/miniconda/conda-bld/$TRAVIS_OS_NAME-64/*.tar.bz2 --force;
          
          fi
