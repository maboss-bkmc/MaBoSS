name: cMaBoSS Windows

on:
  push:
  pull_request:
  release:
    types: [created]

jobs:
  build_wheels_windows:
    name: Build windows wheels
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        build: [
          {name: "win32", pattern: "cp*-win32", arch: "x86", triplet: "x86-windows"},
          {name: "win64", pattern: "cp*-win_amd64", arch: "amd64", triplet: "x64-windows"}
        ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12' 

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.build.arch }}
    
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel numpy twine

      - name: Build wheels  
        env: 
          CC: cl.exe
          CXX: cl.exe
          LIBSBML_DIR: "C:/libsbml/"
          LIBXML_DIR: "C:/vcpkg/installed/${{ matrix.build.triplet}}/"
          CMAKE_BUILD_PARALLEL_LEVEL: 1
          CIBW_BUILD: ${{ matrix.build.pattern }}
          CIBW_BEFORE_ALL: >
            vcpkg install libxml2:${{ matrix.build.triplet}} &&
            choco install winflexbison3 &&
            set LIBXML_LIBRARY="C:/vcpkg/installed/${{ matrix.build.triplet}}/lib/libxml2.lib" &&
            set LIBXML_INCLUDE_DIR="C:/vcpkg/installed/${{ matrix.build.triplet}}/include/" &&
            set LIBBZ_LIBRARY="C:/vcpkg/installed/${{ matrix.build.triplet}}/lib/libbz2.lib" &&
            set LIBBZ_INCLUDE_DIR="C:/vcpkg/installed/${{ matrix.build.triplet}}/include/" &&
            set ZLIB_LIBRARY="C:/vcpkg/installed/${{ matrix.build.triplet}}/lib/zlib.lib" &&
            set ZLIB_INCLUDE_DIR="C:/vcpkg/installed/${{ matrix.build.triplet}}/include/" &&
            set LIBSBML_INSTALL_PREFIX="C:/libsbml/" &&
            .\\scripts\build_libsbml.bat &&
            .\\scripts\install_libsbml.bat
          CIBW_SKIP: pp* cp314-* cp314t-*
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BEFORE_BUILD: > 
            pip install delvewheel
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >
            delvewheel repair -w {dest_dir} {wheel} --add-path C:/vcpkg/installed/${{ matrix.build.triplet}}/bin/;C:/libsbml/bin/
          CIBW_ENVIRONMENT_PASS_WINDOWS: SBML_COMPAT
          CIBW_TEST_REQUIRES: pandas
          CIBW_TEST_COMMAND: >
            cd /d {project}/engine/tests/cmaboss &&
            python -m unittest test.py &&
            python -m unittest test_128n.py
        run: |
          python -m cibuildwheel --output-dir wheelhouse engine/python
      
      - uses: actions/upload-artifact@v4
        with:
          name: wheels_${{ matrix.build.name }}
          path: wheelhouse/*.whl
          
      - name: Upload cMaBoSS to test Pypi
        if: github.repository == 'sysbio-curie/MaBoSS' && github.ref == 'refs/heads/master'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TEST_TOKEN }}
        run: |
          python -m twine upload --repository testpypi --skip-existing wheelhouse/cmaboss*
          
      - name: Upload cMaBoSS to Pypi
        if: github.repository == 'sysbio-curie/MaBoSS' && github.event_name == 'release'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m twine upload --skip-existing wheelhouse/cmaboss*
        
  cmaboss_conda:
    name: Build cMaBoSS conda package (${{matrix.repo.name}}, python ${{matrix.version.python}}, numpy ${{matrix.version.numpy}})
    runs-on: windows-2022

    strategy:
      fail-fast: false
      matrix:
        repo: [
          {name: defaults, libsbml: libsbml-plus-packages, libsbml_source: colomoto, build_number: 0},
          {name: conda-forge, libsbml: libsbml, libsbml_source: conda-forge, build_number: 1}
        ]
        version: [{python: '3.8', numpy: 1.24}, {python: '3.9', numpy: 2.0}, {python: '3.10', numpy: 2.0}, {python: '3.11', numpy: 2.0}, {python: '3.12', numpy: 2.0}, {python: '3.13', numpy: 2.1}]
    
    defaults:
      run:
        shell: pwsh -Command {0}
                
    steps:
    - uses: actions/checkout@v4
    - uses: ilammy/msvc-dev-cmd@v1 
    - uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        conda-remove-defaults: "true"
        channels: ${{ matrix.repo.name }}
        python-version: 3.12
        use-mamba: true
    
    - name: Install conda-build
      run: |
        conda install conda-build anaconda-client conda-verify
        
    - name: Install winflexbison for defaults build
      if: matrix.repo.name == 'defaults'
      run: |
        conda install -c conda-forge winflexbison
        Get-Content .\conda\cmaboss\meta.yaml | Where-Object {$_ -notmatch 'winflexbison'} | Set-Content out.yaml
        xcopy out.yaml .\conda\cmaboss\meta.yaml /y
        echo "FLEX_ROOT=C:\Miniconda\envs\test\Library\bin\" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "BISON_ROOT=C:\Miniconda\envs\test\Library\bin\" | Out-File -FilePath $env:GITHUB_ENV -Append
    
    - name: Build cMaBoSS Anaconda package
      env: 
        LIBSBML_PACKAGE: ${{ matrix.repo.libsbml }}
        CUSTOM_BUILD_NUMBER: ${{ matrix.repo.build_number }}
      run: |
        conda build -c ${{ matrix.repo.libsbml_source }} --variants "{python: [${{ matrix.version.python }}], numpy: ['${{ matrix.version.numpy }}']}" conda/cmaboss;
     
    - name: Upload cMaBoSS Ananconda package on vincent-noel
      run: |
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u vincent-noel C:\Miniconda\envs\test\conda-bld\win-64\*.conda --force;

    - name: Upload cMaBoSS Ananconda package on colomoto
      if: github.repository == 'sysbio-curie/MaBoSS' && github.event_name == 'release'
      run: |
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u colomoto C:\Miniconda\envs\test\conda-bld\win-64\*.conda --force;
