name: Tests Ubuntu

on:
  push:
  pull_request:
  release:
    types: [created]

jobs:
  maboss:
    name: MaBoSS (gcc)
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
    
    - name: Install dependencies
      run: |
        sudo apt-get install flex bison
        pip install numpy
    
    - name: Cache compiled libSBML
      id: cache-libsbml-gcc
      uses: actions/cache@v2
      with:
        path: /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/libSBML-5.19.0-Source
        key: ${{ runner.os }}-libSBML-5.19-gcc-namespace

    - name: Compiling libSBML
      if: steps.cache-libsbml-gcc.outputs.cache-hit != 'true'
      run: |
        wget https://sourceforge.net/projects/sbml/files/libsbml/5.19.0/stable/libSBML-5.19.0-core-plus-packages-src.tar.gz
        tar -zxf libSBML-5.19.0-core-plus-packages-src.tar.gz
        cd libSBML-5.19.0-Source
        mkdir build
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_LIBDIR=/usr/lib \
        -DCMAKE_CXX_COMPILER=g++ \
        -DCMAKE_C_COMPILER=gcc \
        -DCMAKE_CXX_STANDARD_LIBRARIES=-lxml2 \
        -DWITH_SWIG=OFF \
        -DLIBXML_LIBRARY=/usr/lib \
        -DLIBXML_INCLUDE_DIR=/usr/include/libxml2 \
        -DENABLE_COMP=ON \
        -DENABLE_FBC=ON \
        -DENABLE_GROUPS=ON \
        -DENABLE_LAYOUT=ON \
        -DENABLE_MULTI=ON \
        -DENABLE_QUAL=ON \
        -DENABLE_RENDER=ON \
        -DENABLE_DISTRIB=ON \
        -DWITH_CPP_NAMESPACE=ON \
        ..
        make
        cd ../..

    - name: Install libSBML
      run: |
        cd libSBML-5.19.0-Source/build
        sudo make install

    - name: Build MaBoSS
      run: |
        cd engine/src
        make clean
        make install SBML_COMPAT=1
        make MAXNODES=128 install SBML_COMPAT=1
    
    - name: Test MaBoSS
      run: |
        bash -c "cd engine/tests; bash ./test-cellcycle.sh"
        bash -c "cd engine/tests; bash ./test-ensemble.sh"
        bash -c "cd engine/tests; bash ./test-ewing.sh"
        bash -c "cd engine/tests; bash ./test-server.sh"
        bash -c "cd engine/tests; bash ./test-prngs.sh"
        bash -c "cd engine/tests; bash ./test-rngs.sh"
        bash -c "cd engine/tests; bash ./test-sbml.sh"
        bash -c "cd engine/tests; bash ./test-user_func.sh"
        
        
  maboss_llvm:
    name: MaBoSS (clang)
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run : |
        sudo apt-get install flex bison clang
        pip install numpy
        
    - name: Cache compiled libSBML
      id: cache-libsbml-clang
      uses: actions/cache@v2
      with:
        path: /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/libSBML-5.19.0-Source
        key: ${{ runner.os }}-libSBML-5.19-clang-namespace

    - name: Compiling libSBML
      if: steps.cache-libsbml-clang.outputs.cache-hit != 'true'
      run: |
        wget https://sourceforge.net/projects/sbml/files/libsbml/5.19.0/stable/libSBML-5.19.0-core-plus-packages-src.tar.gz
        tar -zxf libSBML-5.19.0-core-plus-packages-src.tar.gz
        cd libSBML-5.19.0-Source
        mkdir build
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_LIBDIR=/usr/lib \
        -DCMAKE_CXX_COMPILER=clang++ \
        -DCMAKE_C_COMPILER=clang \
        -DCMAKE_CXX_STANDARD_LIBRARIES=-lxml2 \
        -DWITH_SWIG=OFF \
        -DLIBXML_LIBRARY=/usr/lib \
        -DLIBXML_INCLUDE_DIR=/usr/include/libxml2 \
        -DENABLE_COMP=ON \
        -DENABLE_FBC=ON \
        -DENABLE_GROUPS=ON \
        -DENABLE_LAYOUT=ON \
        -DENABLE_MULTI=ON \
        -DENABLE_QUAL=ON \
        -DENABLE_RENDER=ON \
        -DENABLE_DISTRIB=ON \
        -DWITH_CPP_NAMESPACE=ON \
        ..
        make
        cd ../..
        
    - name: Install libSBML
      run: |
        cd libSBML-5.19.0-Source/build
        sudo make install

        
    - name: Build MaBoSS
      run: |
        cd engine/src
        make clean
        make GCC=clang CXX=clang++ install SBML_COMPAT=1
        make GCC=clang CXX=clang++ MAXNODES=128 install SBML_COMPAT=1
    
    - name: Test MaBoSS
      run: |
        bash -c "cd engine/tests; bash ./test-cellcycle.sh"
        bash -c "cd engine/tests; bash ./test-ensemble.sh"
        bash -c "cd engine/tests; bash ./test-ewing.sh"
        bash -c "cd engine/tests; bash ./test-server.sh"
        bash -c "cd engine/tests; bash ./test-prngs.sh"
        bash -c "cd engine/tests; bash ./test-rngs.sh"
        bash -c "cd engine/tests; bash ./test-sbml.sh"
        bash -c "cd engine/tests; bash ./test-user_func.sh"
  
  maboss_mpi:
    name: MaBoSS MPI
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
    
    - name: Install dependencies
      run: |
        sudo apt-get install flex bison libopenmpi-dev
        pip install numpy
    
    - name: Build MaBoSS
      run: |
        cd engine/src
        make clean
        make install CXX=mpic++ MPI_COMPAT=1
        make install CXX=mpic++ MPI_COMPAT=1 MAXNODES=128
       
    - name: Test MaBoSS
      run: |
        bash -c "cd engine/tests; bash ./test-mpi-cellcycle.sh"
        bash -c "cd engine/tests; bash ./test-mpi-ewing.sh"
         
  maboss_binary:
    name: Building MaBoSS linux64 binary
    runs-on: ubuntu-18.04
    needs: [maboss, maboss_llvm]
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v2
    
    - name: Install dependencies
      run: |
        sudo apt-get install flex bison
        pip install numpy
    
    - name: Cache compiled libSBML
      id: cache-libsbml-gcc
      uses: actions/cache@v2
      with:
        path: /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/libSBML-5.19.0-Source
        key: ${{ runner.os }}-libSBML-5.19-gcc-namespace

    - name: Compiling libSBML
      if: steps.cache-libsbml-gcc.outputs.cache-hit != 'true'
      run: |
        wget https://sourceforge.net/projects/sbml/files/libsbml/5.19.0/stable/libSBML-5.19.0-core-plus-packages-src.tar.gz
        tar -zxf libSBML-5.19.0-core-plus-packages-src.tar.gz
        cd libSBML-5.19.0-Source
        mkdir build
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_LIBDIR=/usr/lib \
        -DCMAKE_CXX_COMPILER=g++ \
        -DCMAKE_C_COMPILER=gcc \
        -DCMAKE_CXX_STANDARD_LIBRARIES=-lxml2 \
        -DWITH_SWIG=OFF \
        -DLIBXML_LIBRARY=/usr/lib \
        -DLIBXML_INCLUDE_DIR=/usr/include/libxml2 \
        -DENABLE_COMP=ON \
        -DENABLE_FBC=ON \
        -DENABLE_GROUPS=ON \
        -DENABLE_LAYOUT=ON \
        -DENABLE_MULTI=ON \
        -DENABLE_QUAL=ON \
        -DENABLE_RENDER=ON \
        -DENABLE_DISTRIB=ON \
        -DWITH_CPP_NAMESPACE=ON \
        ..
        make
        cd ../..

    - name: Install libSBML
      run: |
        cd libSBML-5.19.0-Source/build
        sudo make install
          
    - name: Build binary
      run: |
        rm -fr engine/pub/*
        cd engine/src
        make clean
        make install_static SBML_COMPAT=1
        make install_static MAXNODES=128 SBML_COMPAT=1
        make install_static MAXNODES=256 SBML_COMPAT=1
        make install_static MAXNODES=512 SBML_COMPAT=1
        make install_static MAXNODES=1024 SBML_COMPAT=1
        cd ../pub
        zip MaBoSS-linux64.zip *
        
    - uses: actions/upload-artifact@v2
      if: github.event_name != 'release'
      with:
        name: MaBoSS-linux64
        path: /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/pub/MaBoSS-linux64.zip
        
    - uses: actions/upload-release-asset@v1
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: MaBoSS-linux64.zip
        asset_path: /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/pub/MaBoSS-linux64.zip
        asset_content_type: application/zip
  
  
  maboss_library:
    name: Building MaBoSS linux64 library
    runs-on: ubuntu-18.04
    needs: [maboss, maboss_llvm]
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v2
    
    - name: Install dependencies
      run: |
        sudo apt-get install flex bison
          
    - name: Build binary
      run: |
        rm -fr engine/pub/*
        cd engine/src
        make clean
        make install_lib 
        make install_lib MAXNODES=128
        make install_lib MAXNODES=256
        make install_lib MAXNODES=512
        make install_lib MAXNODES=1024
        make install_alib 
        make install_alib MAXNODES=128
        make install_alib MAXNODES=256
        make install_alib MAXNODES=512
        make install_alib MAXNODES=1024
        make clean
        cd ../../../
        tar -zcvf libMaBoSS-linux64.tar.gz MaBoSS-env-2.0/README.md MaBoSS-env-2.0/LICENSE MaBoSS-env-2.0/engine/src MaBoSS-env-2.0/engine/include MaBoSS-env-2.0/engine/lib
        
    - uses: actions/upload-artifact@v2
      if: github.event_name != 'release'
      with:
        name: libMaBoSS-linux64
        path: /home/runner/work/MaBoSS-env-2.0/libMaBoSS-linux64.tar.gz
        
    - uses: actions/upload-release-asset@v1
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: libMaBoSS-linux64.tar.gz
        asset_path: /home/runner/work/MaBoSS-env-2.0/libMaBoSS-linux64.tar.gz
        asset_content_type: application/gzip
  
  maboss_conda_defaults:
    name: Build MaBoSS Anaconda package
    runs-on: ubuntu-18.04
    needs: [maboss, maboss_llvm]
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Install conda-build
      run: |
        conda update conda
        conda update conda --all
        conda install conda-build anaconda-client conda-verify
      
    - name: Build Anaconda package
      run: |
        conda build -c colomoto conda/maboss

    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/share/miniconda/conda-bld/linux-64/*
        key: ${{ runner.os }}-maboss-conda-defaults-${{ github.run_id }}
           
  maboss_conda:
    name: Build MaBoSS Anaconda package (conda-forge)
    runs-on: ubuntu-18.04
    needs: [maboss, maboss_llvm]
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Install conda-build
      run: |
        conda update conda
        conda config --add channels conda-forge
        conda config --set channel_priority strict
        conda update conda --all
        conda install conda-build anaconda-client conda-verify
      
    - name: Build Anaconda package
      run: |
        CUSTOM_BUILD_NUMBER=1 conda build -c colomoto conda/maboss

    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/share/miniconda/conda-bld/linux-64/*
        key: ${{ runner.os }}-maboss-conda-${{ github.run_id }}
        
  
  maboss_conda_test_defaults:
    name: Test MaBoSS Anaconda package
    runs-on: ubuntu-18.04
    needs: maboss_conda_defaults
     
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/share/miniconda/conda-bld/linux-64/*
        key: ${{ runner.os }}-maboss-conda-defaults-${{ github.run_id }}
        
    - name: Install conda-build
      run: |
        conda update conda
        conda update conda --all
        conda install conda-build
     
    - name: Install package
      run: |
        conda index /usr/share/miniconda/conda-bld
        conda install --use-local -c colomoto maboss
       
    - name: Test package
      run: |
        pip install numpy
        export MABOSS=/usr/share/miniconda/bin/MaBoSS
        export MABOSS_128n=/usr/share/miniconda/bin/MaBoSS_128n
        export MABOSS_CLIENT=/usr/share/miniconda/bin/MaBoSS-client
        export MABOSS_SERVER=/usr/share/miniconda/bin/MaBoSS-server
        export MABOSS_SERVER_128n=/usr/share/miniconda/bin/MaBoSS_128n-server
        bash -c "cd engine/tests; bash ./test-cellcycle.sh"
        bash -c "cd engine/tests; bash ./test-ensemble.sh"
        bash -c "cd engine/tests; bash ./test-ewing.sh"
        bash -c "cd engine/tests; bash ./test-server.sh"
        bash -c "cd engine/tests; bash ./test-prngs.sh"
        bash -c "cd engine/tests; bash ./test-rngs.sh"
        bash -c "cd engine/tests; bash ./test-sbml.sh"
  maboss_conda_test:
    name: Test MaBoSS Anaconda package (conda-forge)
    runs-on: ubuntu-18.04
    needs: maboss_conda
     
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/share/miniconda/conda-bld/linux-64/*
        key: ${{ runner.os }}-maboss-conda-${{ github.run_id }}
        
    - name: Install conda-build
      run: |
        conda update conda
        conda config --add channels conda-forge
        conda config --set channel_priority strict
        conda update conda --all
        conda install conda-build
     
    - name: Install package
      run: |
        conda index /usr/share/miniconda/conda-bld
        conda install --use-local -c colomoto maboss
       
    - name: Test package
      run: |
        pip install numpy
        export MABOSS=/usr/share/miniconda/bin/MaBoSS
        export MABOSS_128n=/usr/share/miniconda/bin/MaBoSS_128n
        export MABOSS_CLIENT=/usr/share/miniconda/bin/MaBoSS-client
        export MABOSS_SERVER=/usr/share/miniconda/bin/MaBoSS-server
        export MABOSS_SERVER_128n=/usr/share/miniconda/bin/MaBoSS_128n-server
        bash -c "cd engine/tests; bash ./test-cellcycle.sh"
        bash -c "cd engine/tests; bash ./test-ensemble.sh"
        bash -c "cd engine/tests; bash ./test-ewing.sh"
        bash -c "cd engine/tests; bash ./test-server.sh"
        bash -c "cd engine/tests; bash ./test-prngs.sh"
        bash -c "cd engine/tests; bash ./test-rngs.sh"
        bash -c "cd engine/tests; bash ./test-sbml.sh"
        
  maboss_conda_publish_defaults:
    name: Publish MaBoSS Anaconda package
    runs-on: ubuntu-18.04
    needs: maboss_conda_test_defaults
     
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Restoring cached conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/share/miniconda/conda-bld/linux-64/*
        key: ${{ runner.os }}-maboss-conda-defaults-${{ github.run_id }}
    
    - name: Install anaconda-client
      run: |
        conda update conda
        conda update --all
        conda install anaconda-client
    
    - name: Upload MaBoSS Ananconda package on vincent-noel
      if: github.repository == 'vincent-noel/MaBoSS-env-2.0' && github.ref == 'refs/heads/master'
      run: |
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u vincent-noel /usr/share/miniconda/conda-bld/linux-64/*.tar.bz2 --force;
    
    - name: Upload MaBoSS Ananconda package on colomoto
      if: github.repository == 'sysbio-curie/MaBoSS-env-2.0' && github.event_name == 'release'
      run: |
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u colomoto /usr/share/miniconda/conda-bld/linux-64/*.tar.bz2 --force;
    
  maboss_conda_publish:
    name: Publish MaBoSS Anaconda package (conda-forge)
    runs-on: ubuntu-18.04
    needs: maboss_conda_test
     
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Restoring cached conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/share/miniconda/conda-bld/linux-64/*
        key: ${{ runner.os }}-maboss-conda-${{ github.run_id }}
    
    - name: Install anaconda-client
      run: |
        conda update conda
        conda config --add channels conda-forge
        conda config --set channel_priority strict
        conda update --all
        conda install anaconda-client
    
    - name: Upload MaBoSS Ananconda package on vincent-noel
      if: github.repository == 'vincent-noel/MaBoSS-env-2.0' && github.ref == 'refs/heads/master'
      run: |
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u vincent-noel /usr/share/miniconda/conda-bld/linux-64/*.tar.bz2 --force;
    
    - name: Upload MaBoSS Ananconda package on colomoto
      if: github.repository == 'sysbio-curie/MaBoSS-env-2.0' && github.event_name == 'release'
      run: |
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u colomoto /usr/share/miniconda/conda-bld/linux-64/*.tar.bz2 --force;
    
    
  test_docker:
    name: Docker MaBoSS Server
    runs-on: ubuntu-18.04
    needs: [maboss, maboss_llvm]
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Install dependencies
      run: |
        sudo apt-get install flex bison
        pip install numpy
      
    - name: Start MaBoSS docker server
      run: |
        docker-compose up -d maboss-server
        bash -c "cd engine/src; make client"
        
    - name: Test MaBoSS docker server
      run: |
        bash -c "cd engine/tests; bash ./test-container.sh"
  
    - name: Connect Docker Hub
      if: github.event_name == 'release' && github.event.action == 'created' && github.repository == 'sysbio-curie/MaBoSS-env-2.0'
      run: |
        echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        
    - name: Upload Docker Hub
      if: github.event_name == 'release' && github.event.action == 'created' && github.repository == 'sysbio-curie/MaBoSS-env-2.0'
      run: | 
          docker tag maboss-server:latest vnoel/maboss-server:latest
          docker push vnoel/maboss-server:latest
    
  test_singularity:
    name: Singularity MaBoSS Server
    runs-on: ubuntu-18.04
    needs: [maboss, maboss_llvm]
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'
   
    steps:
    - uses: actions/checkout@v2
    
    - name: Install dependencies
      run: |
        wget -O- http://neuro.debian.net/lists/bionic.de-m.libre | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list
        sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com 0xA5D32F012649A5A9
        sudo apt-get -qq update
        sudo apt-get install -yq python-virtualenv singularity-container debootstrap
        
        
        sudo apt-get install flex bison
        pip install numpy
      
    - name: Start MaBoSS Singularity server
      run: |
        sudo singularity build maboss-server.simg containers/singularity/Singularity
        singularity run maboss-server.simg &
        bash -c "cd engine/src; make client"
        
    - name: Test MaBoSS
      run: |
        bash -c "cd engine/tests; bash ./test-container.sh"
    
  cmaboss:
    name: cMaBoSS
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
    
    - name: Install dependencies
      run: |
        sudo apt-get install -yq python3-pip python3-setuptools
        sudo pip3 install numpy

    - name: Cache compiled libSBML
      id: cache-libsbml-gcc
      uses: actions/cache@v2
      with:
        path: /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/libSBML-5.19.0-Source
        key: ${{ runner.os }}-libSBML-5.19-gcc-namespace

    - name: Compiling libSBML
      if: steps.cache-libsbml-gcc.outputs.cache-hit != 'true'
      run: |
        wget https://sourceforge.net/projects/sbml/files/libsbml/5.19.0/stable/libSBML-5.19.0-core-plus-packages-src.tar.gz
        tar -zxf libSBML-5.19.0-core-plus-packages-src.tar.gz
        cd libSBML-5.19.0-Source
        mkdir build
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_LIBDIR=/usr/lib \
        -DCMAKE_CXX_COMPILER=g++ \
        -DCMAKE_C_COMPILER=gcc \
        -DCMAKE_CXX_STANDARD_LIBRARIES=-lxml2 \
        -DWITH_SWIG=OFF \
        -DLIBXML_LIBRARY=/usr/lib \
        -DLIBXML_INCLUDE_DIR=/usr/include/libxml2 \
        -DENABLE_COMP=ON \
        -DENABLE_FBC=ON \
        -DENABLE_GROUPS=ON \
        -DENABLE_LAYOUT=ON \
        -DENABLE_MULTI=ON \
        -DENABLE_QUAL=ON \
        -DENABLE_RENDER=ON \
        -DENABLE_DISTRIB=ON \
        -DWITH_CPP_NAMESPACE=ON \
        ..
        make
        cd ../..
        
    - name: Install libSBML
      run: |
        cd libSBML-5.19.0-Source/build
        sudo make install

        
    - name: Build cMaBoSS
      run: |
        cd engine/src
        make
        cd ../python
        cp -r ../src cmaboss
        pip3 install .
        cd ../..
    
    - name: Test cMaBoSS
      run: |
        cd engine/tests
        python3 -m unittest test
        python3 -m unittest test_128n
   

  cmaboss_conda_defaults:
    name: Build cMaBoSS Anaconda package
    runs-on: ubuntu-18.04
    needs: cmaboss
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
 
    - name: Install conda-build
      run: |
        conda update conda
        conda update conda --all
        conda install conda-build anaconda-client conda-verify
      
    - name: Build cMaBoSS Anaconda package
      run: |
        conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\"], \"numpy\": \"1.16\"}" conda/cmaboss;
        conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\", \"3.8\"], \"numpy\": \"1.17\"}" conda/cmaboss;
        conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\", \"3.8\"], \"numpy\": \"1.18\"}" conda/cmaboss;
        conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\", \"3.8\", \"3.9\"], \"numpy\": \"1.19\"}" conda/cmaboss;
        conda build -c colomoto --variants "{\"python\": [\"3.7\", \"3.8\", \"3.9\"], \"numpy\": \"1.20\"}" conda/cmaboss;
        conda build -c colomoto --variants "{\"python\": [\"3.7\", \"3.8\", \"3.9\", \"3.10\"], \"numpy\": \"1.21\"}" conda/cmaboss;
        
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/share/miniconda/conda-bld/linux-64/*
        key: ${{ runner.os }}-cmaboss-conda-defaults-${{ github.run_id }}
  
  cmaboss_conda:
    name: Build cMaBoSS Anaconda package (conda-forge)
    runs-on: ubuntu-18.04
    needs: cmaboss
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
 
    - name: Install conda-build
      run: |
        conda update conda
        conda config --add channels conda-forge
        conda config --set channel_priority strict
        conda update conda --all
        conda install conda-build anaconda-client conda-verify
      
    - name: Build cMaBoSS Anaconda package
      run: |
        CUSTOM_BUILD_NUMBER=1 conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\"], \"numpy\": \"1.16\"}" conda/cmaboss;
        CUSTOM_BUILD_NUMBER=1 conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\", \"3.8\"], \"numpy\": \"1.17\"}" conda/cmaboss;
        CUSTOM_BUILD_NUMBER=1 conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\", \"3.8\"], \"numpy\": \"1.18\"}" conda/cmaboss;
        CUSTOM_BUILD_NUMBER=1 conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\", \"3.8\", \"3.9\"], \"numpy\": \"1.19\"}" conda/cmaboss;
        CUSTOM_BUILD_NUMBER=1 conda build -c colomoto --variants "{\"python\": [\"3.7\", \"3.8\", \"3.9\"], \"numpy\": \"1.20\"}" conda/cmaboss;
        CUSTOM_BUILD_NUMBER=1 conda build -c colomoto --variants "{\"python\": [\"3.7\", \"3.8\", \"3.9\", \"3.10\"], \"numpy\": \"1.21\"}" conda/cmaboss;
        
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/share/miniconda/conda-bld/linux-64/*
        key: ${{ runner.os }}-cmaboss-conda-${{ github.run_id }}
          
        
  cmaboss_conda_defaults_test:
    name: Test cMaBoSS Anaconda package
    runs-on: ubuntu-18.04
    needs: cmaboss_conda_defaults
    
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/share/miniconda/conda-bld/linux-64/*
        key: ${{ runner.os }}-cmaboss-conda-defaults-${{ github.run_id }}
        
    - name: Install conda-build
      run: |
        conda update conda
        conda update conda --all
        conda install conda-build
     
    - name: Install package
      run: |
        conda index /usr/share/miniconda/conda-bld
        conda install --use-local -c colomoto cmaboss
        
    - name: Test package
      run: |
        cd engine/tests
        python -m unittest test
        python -m unittest test_128n
  
  cmaboss_conda_test:
    name: Test cMaBoSS Anaconda package (conda-forge)
    runs-on: ubuntu-18.04
    needs: cmaboss_conda
    
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/share/miniconda/conda-bld/linux-64/*
        key: ${{ runner.os }}-cmaboss-conda-${{ github.run_id }}
        
    - name: Install conda-build
      run: |
        conda update conda
        conda config --add channels conda-forge
        conda config --set channel_priority strict
        conda update conda --all
        conda install conda-build
     
    - name: Install package
      run: |
        conda index /usr/share/miniconda/conda-bld
        conda install --use-local -c colomoto cmaboss
        
    - name: Test package
      run: |
        cd engine/tests
        python -m unittest test
        python -m unittest test_128n
        
  cmaboss_conda_publish_defaults:
    name: Publish cMaBoSS Anaconda package
    runs-on: ubuntu-18.04
    needs: cmaboss_conda_defaults_test
    
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/share/miniconda/conda-bld/linux-64/*
        key: ${{ runner.os }}-cmaboss-conda-defaults-${{ github.run_id }}
              
    - name: Install anaconda-client
      run: |
        conda update conda
        conda update --all
        conda install anaconda-client
     
    - name: Upload cMaBoSS Ananconda package on vincent-noel
      if: github.repository == 'vincent-noel/MaBoSS-env-2.0' && github.ref == 'refs/heads/master'
      run: |
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u vincent-noel /usr/share/miniconda/conda-bld/linux-64/*.tar.bz2 --force;

    - name: Upload cMaBoSS Ananconda package on colomoto
      if: github.repository == 'sysbio-curie/MaBoSS-env-2.0' && github.event_name == 'release'
      run: |
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u colomoto /usr/share/miniconda/conda-bld/linux-64/*.tar.bz2 --force;
  cmaboss_conda_publish:
    name: Publish cMaBoSS Anaconda package (conda-forge)
    runs-on: ubuntu-18.04
    needs: cmaboss_conda_test
    
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/share/miniconda/conda-bld/linux-64/*
        key: ${{ runner.os }}-cmaboss-conda-${{ github.run_id }}
              
    - name: Install anaconda-client
      run: |
        conda update conda
        conda config --add channels conda-forge
        conda config --set channel_priority strict
        conda update --all
        conda install anaconda-client
     
    - name: Upload cMaBoSS Ananconda package on vincent-noel
      if: github.repository == 'vincent-noel/MaBoSS-env-2.0' && github.ref == 'refs/heads/master'
      run: |
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u vincent-noel /usr/share/miniconda/conda-bld/linux-64/*.tar.bz2 --force;

    - name: Upload cMaBoSS Ananconda package on colomoto
      if: github.repository == 'sysbio-curie/MaBoSS-env-2.0' && github.event_name == 'release'
      run: |
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u colomoto /usr/share/miniconda/conda-bld/linux-64/*.tar.bz2 --force;

  cmaboss_manylinux_2010:
    name: manylinux2010 wheel
    runs-on: ubuntu-18.04
    needs: cmaboss
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'

    
    steps:
    - uses: actions/checkout@v2
    
    - name: Compile MaBoSS
      run: |
        cd engine/src; make
        cd ../python; cp -r ../src cmaboss
        cd ../..
        
    - name: Build cMaBoSS manylinux2010_x86_64
      run: |
        cd engine/python
        docker run --rm -e PLAT=manylinux2010_x86_64 -v `pwd`:/io quay.io/pypa/manylinux2010_x86_64 /io/build-wheels.sh
        mkdir manylinux_2010
        cp wheelhouse/* manylinux_2010/
            
    - name: Caching produced wheels
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/manylinux_2010
        key: ${{ runner.os }}-cmaboss-manylinux2010-${{ github.run_id }}
       
  cmaboss_manylinux_2014:
    name: manylinux2014 wheel
    runs-on: ubuntu-18.04
    needs: cmaboss
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v2
    
    - name: Compile MaBoSS
      run: |
        cd engine/src; make
        cd ../python; cp -r ../src cmaboss
        cd ../..
        
    - name: Build cMaBoSS manylinux2014_x86_64
      run: |
        cd engine/python
        docker run --rm -e PLAT=manylinux2014_x86_64 -v `pwd`:/io quay.io/pypa/manylinux2014_x86_64 /io/build-wheels.sh
        mkdir manylinux_2014
        cp wheelhouse/* manylinux_2014/
                
    - name: Caching produced wheels
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/manylinux_2014
        key: ${{ runner.os }}-cmaboss-manylinux2014-${{ github.run_id }}
        
  cmaboss_manylinux_2_24:
    name: manylinux_2_24 wheel
    runs-on: ubuntu-18.04
    needs: cmaboss
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v2
    
    - name: Compile MaBoSS
      run: |
        cd engine/src; make
        cd ../python; cp -r ../src cmaboss
        cd ../..
        
    - name: Build cMaBoSS manylinux_2_24_x86_64
      run: |
        cd engine/python
        docker run --rm -e PLAT=manylinux_2_24_x86_64 -v `pwd`:/io quay.io/pypa/manylinux_2_24_x86_64 /io/build-wheels_2_24.sh
        mkdir manylinux_2_24
        cp wheelhouse/* manylinux_2_24/
            
    - name: Caching produced wheels
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/manylinux_2_24
        key: ${{ runner.os }}-cmaboss-manylinux224-${{ github.run_id }}
     
  cmaboss_manylinux_ubuntu18_test:
    name: Ubuntu 18 wheels test
    runs-on: ubuntu-18.04
    needs: [cmaboss_manylinux_2010, cmaboss_manylinux_2014, cmaboss_manylinux_2_24]
   
    steps:
    - uses: actions/checkout@v2
    
    - name: Caching produced wheels
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/manylinux_2010
        key: ${{ runner.os }}-cmaboss-manylinux2010-${{ github.run_id }}
    
    - name: Caching produced wheels
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/manylinux_2014
        key: ${{ runner.os }}-cmaboss-manylinux2014-${{ github.run_id }}
    
    - name: Caching produced wheels
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/manylinux_2_24
        key: ${{ runner.os }}-cmaboss-manylinux224-${{ github.run_id }}
        
    - name: Installing library
      run: |
        cd engine/python
        mkdir manylinuxes
        cp manylinux_2010/* manylinuxes
        cp manylinux_2014/* manylinuxes
        cp manylinux_2_24/* manylinuxes
        pip3 install numpy
        ls -al manylinuxes
        pip3 install -f manylinuxes cmaboss -vvv
     
    - name: Test package
      run: |
        cd engine/tests
        python3 -m unittest test
        python3 -m unittest test_128n
    
    - name: Caching produced wheels
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/manylinuxes
        key: ${{ runner.os }}-cmaboss-manylinuxes-${{ github.run_id }}  
    
  cmaboss_manylinux_ubuntu20_test:
    name: Ubuntu 20 wheels test
    runs-on: ubuntu-20.04
    needs: [cmaboss_manylinux_2010, cmaboss_manylinux_2014, cmaboss_manylinux_2_24]
 
    steps:
    - uses: actions/checkout@v2
    
    - name: Caching produced wheels
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/manylinux_2010
        key: ${{ runner.os }}-cmaboss-manylinux2010-${{ github.run_id }}
    
    - name: Caching produced wheels
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/manylinux_2014
        key: ${{ runner.os }}-cmaboss-manylinux2014-${{ github.run_id }}
    
    - name: Caching produced wheels
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/manylinux_2_24
        key: ${{ runner.os }}-cmaboss-manylinux224-${{ github.run_id }}
        
    - name: Installing library
      run: |
        cd engine/python
        mkdir manylinuxes
        cp manylinux_2010/* manylinuxes
        cp manylinux_2014/* manylinuxes
        cp manylinux_2_24/* manylinuxes
        pip3 install numpy
        ls -al manylinuxes
        pip3 install -f manylinuxes cmaboss -vvv
     
    - name: Test package
      run: |
        cd engine/tests
        python3 -m unittest test
        python3 -m unittest test_128n
    
      
  cmaboss_deploy:
    name: PyPi deploy
    runs-on: ubuntu-18.04
    needs: [cmaboss_manylinux_ubuntu18_test, cmaboss_manylinux_ubuntu20_test]

    steps:
    - name: Caching produced wheels
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/manylinuxes
        key: ${{ runner.os }}-cmaboss-manylinuxes-${{ github.run_id }}  
     
    - name: Upload cMaBoSS package to testPypi 
      if: github.repository == 'vincent-noel/MaBoSS-env-2.0' && github.ref == 'refs/heads/master'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_TOKEN }}
      run: |
        pip install twine
        cd engine/python
        ls -al manylinuxes
        python -m twine upload --repository testpypi --skip-existing manylinuxes/cmaboss*
        
    - name: Upload cMaBoSS Pypi package
      if: github.repository == 'sysbio-curie/MaBoSS-env-2.0' && github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        pip install twine
        cd engine/python
        ls -al manylinuxes
        python -m twine upload --skip-existing manylinuxes/cmaboss*
        
        
        
        