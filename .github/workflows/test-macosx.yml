name: Tests MacOSX

on:
  push:
  pull_request:
  release:
    types: [created]
    
jobs:

###################################################################################################
# MaBoSS                                                                                          #
###################################################################################################
  maboss:
    name: MaBoSS
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run : |
        brew install flex bison gcc libxml2 cmake
        pip install numpy
        pwd
        
    - name: Get cmake version
      id: get-cmake-version
      run: |
        echo "::set-output name=version::$(cmake --version | head -n 1 | cut -d' ' -f 3)"
      shell: bash

    - name: Cache compiled libSBML
      id: cache-libsbml-gcc
      uses: actions/cache@v2
      with:
        path: /Users/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/libSBML-5.19.0-Source
        key: ${{ runner.os }}-libSBML-5.19-g++-namespace-${{ steps.get-cmake-version.outputs.version }}

    - name: Compiling libSBML
      if: steps.cache-libsbml-gcc.outputs.cache-hit != 'true'
      run: |
        wget https://sourceforge.net/projects/sbml/files/libsbml/5.19.0/stable/libSBML-5.19.0-core-plus-packages-src.tar.gz
        tar -zxf libSBML-5.19.0-core-plus-packages-src.tar.gz
        cd libSBML-5.19.0-Source
        mkdir build
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DCMAKE_INSTALL_LIBDIR=/usr/local/lib \
        -DCMAKE_CXX_COMPILER=g++-10 \
        -DCMAKE_C_COMPILER=gcc-10 \
        -DCMAKE_CXX_STANDARD_LIBRARIES=-lxml2 \
        -DWITH_SWIG=OFF \
        -DLIBXML_LIBRARY=/usr/local/opt/libxml2/lib \
        -DLIBXML_INCLUDE_DIR=/usr/local/opt/libxml2/include/libxml2 \
        -DENABLE_COMP=ON \
        -DENABLE_FBC=ON \
        -DENABLE_GROUPS=ON \
        -DENABLE_LAYOUT=ON \
        -DENABLE_MULTI=ON \
        -DENABLE_QUAL=ON \
        -DENABLE_RENDER=ON \
        -DENABLE_DISTRIB=ON \
        -DWITH_CPP_NAMESPACE=ON \
        ..
        make
        cd ../..
        
    - name: Install libSBML
      run: |
        cd libSBML-5.19.0-Source/build
        sudo make install

    - name: Build MaBoSS
      run: |
        cd engine/src
        make clean
        export CXXFLAGS="${CXXFLAGS} -I/usr/local/include -I/usr/local/include/libxml2"
        export LDFLAGS="${LDFLAGS} -L/usr/local/lib -lxml2"
        make CXX=g++-10 install SBML_COMPAT=1
        make CXX=g++-10 MAXNODES=128 install SBML_COMPAT=1
        
    - name: Test MaBoSS
      run: |
        bash -c "cd engine/tests; bash ./test-cellcycle.sh"
        bash -c "cd engine/tests; bash ./test-ensemble.sh"
        bash -c "cd engine/tests; bash ./test-ewing.sh"
        bash -c "cd engine/tests; bash ./test-server.sh"
        bash -c "cd engine/tests; bash ./test-sbml.sh"
        bash -c "cd engine/tests; bash ./test-prngs.sh"
        bash -c "cd engine/tests; bash ./test-rngs.sh"
        bash -c "cd engine/tests; bash ./test-user_func.sh"
        
  maboss_llvm:
    name: MaBoSS (clang)
    runs-on: macos-10.15

    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run : |
        brew install flex bison libxml2 cmake
        pip install numpy
        
    - name: Get cmake version
      id: get-cmake-version
      run: |
        echo "::set-output name=version::$(cmake --version | head -n 1 | cut -d' ' -f 3)"
      shell: bash

    - name: Get xcode version
      id: get-xcode-version
      run: |
        echo "::set-output name=version::$(xcodebuild -version | sed -En 's/Xcode[[:space:]]+([0-9\.]*)/\1/p')"
      shell: bash  

    - name: Cache compiled libSBML
      id: cache-libsbml-clang
      uses: actions/cache@v2
      with:
        path: /Users/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/libSBML-5.19.0-Source
        key: ${{ runner.os }}-libSBML-5.19-clang++-namespace-${{ steps.get-cmake-version.outputs.version }}-${{ steps.get-xcode-version.outputs.version }}

    - name: Compiling libSBML
      if: steps.cache-libsbml-clang.outputs.cache-hit != 'true'
      run: |
        wget https://sourceforge.net/projects/sbml/files/libsbml/5.19.0/stable/libSBML-5.19.0-core-plus-packages-src.tar.gz
        tar -zxf libSBML-5.19.0-core-plus-packages-src.tar.gz
        cd libSBML-5.19.0-Source
        mkdir build
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DCMAKE_INSTALL_LIBDIR=/usr/local/lib \
        -DCMAKE_CXX_COMPILER=g++ \
        -DCMAKE_C_COMPILER=gcc \
        -DCMAKE_CXX_STANDARD_LIBRARIES=-lxml2 \
        -DWITH_SWIG=OFF \
        -DLIBXML_LIBRARY=/usr/local/opt/libxml2/lib \
        -DLIBXML_INCLUDE_DIR=/usr/local/opt/libxml2/include/libxml2 \
        -DENABLE_COMP=ON \
        -DENABLE_FBC=ON \
        -DENABLE_GROUPS=ON \
        -DENABLE_LAYOUT=ON \
        -DENABLE_MULTI=ON \
        -DENABLE_QUAL=ON \
        -DENABLE_RENDER=ON \
        -DENABLE_DISTRIB=ON \
        -DWITH_CPP_NAMESPACE=ON \
        ..
        make
        cd ../..
    
    - name: Install libSBML
      run: |
        cd libSBML-5.19.0-Source/build
        sudo make install

    - name: Build MaBoSS
      run: |
        cd engine/src
        make clean
        g++ --version
        make CXX=g++ install SBML_COMPAT=1
        make CXX=g++ MAXNODES=128 install SBML_COMPAT=1
        
    - name: Test MaBoSS
      run: |
        bash -c "cd engine/tests; bash ./test-cellcycle.sh"
        bash -c "cd engine/tests; bash ./test-ensemble.sh"
        bash -c "cd engine/tests; bash ./test-ewing.sh"
        bash -c "cd engine/tests; bash ./test-server.sh"
        bash -c "cd engine/tests; bash ./test-sbml.sh"
        bash -c "cd engine/tests; bash ./test-prngs.sh"
        bash -c "cd engine/tests; bash ./test-rngs.sh"
        bash -c "cd engine/tests; bash ./test-user_func.sh"
  
  maboss_mpi:
    name: MaBoSS MPI
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run : |
        brew install flex bison gcc@10 libxml2 cmake openmpi
        pip install numpy
        
    - name: Build MaBoSS
      run: |
        cd engine/src
        make clean
        make CXX=mpic++ install MPI_COMPAT=1
        make CXX=mpic++ install MPI_COMPAT=1 MAXNODES=128
        
    - name: Test MaBoSS
      run: |
        bash -c "cd engine/tests; bash ./test-mpi-cellcycle.sh 2"
        bash -c "cd engine/tests; bash ./test-mpi-ewing.sh"
        
  maboss_binary:
    name: MaBoSS MacOSX 64 bits binary
    runs-on: macos-10.15
    needs: [maboss, maboss_llvm]
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run : |
        brew install flex bison gcc libxml2 cmake
        
    - name: Get cmake version
      id: get-cmake-version
      run: |
        echo "::set-output name=version::$(cmake --version | head -n 1 | cut -d' ' -f 3)"
      shell: bash
    
    - name: Get xcode version
      id: get-xcode-version
      run: |
        echo "::set-output name=version::$(xcodebuild -version | sed -En 's/Xcode[[:space:]]+([0-9\.]*)/\1/p')"
      shell: bash  

    - name: Cache compiled libSBML
      id: cache-libsbml-clang
      uses: actions/cache@v2
      with:
        path: /Users/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/libSBML-5.19.0-Source
        key: ${{ runner.os }}-libSBML-5.19-clang++-namespace-${{ steps.get-cmake-version.outputs.version }}-${{ steps.get-xcode-version.outputs.version }}

    - name: Compiling libSBML
      if: steps.cache-libsbml-clang.outputs.cache-hit != 'true'
      run: |
        wget https://sourceforge.net/projects/sbml/files/libsbml/5.19.0/stable/libSBML-5.19.0-core-plus-packages-src.tar.gz
        tar -zxf libSBML-5.19.0-core-plus-packages-src.tar.gz
        cd libSBML-5.19.0-Source
        mkdir -p build
        cd build
        rm -fr *
        cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DCMAKE_INSTALL_LIBDIR=/usr/local/lib \
        -DCMAKE_CXX_COMPILER=g++ \
        -DCMAKE_C_COMPILER=gcc \
        -DCMAKE_CXX_STANDARD_LIBRARIES=-lxml2 \
        -DWITH_SWIG=OFF \
        -DLIBXML_LIBRARY=/usr/local/opt/libxml2/lib \
        -DLIBXML_INCLUDE_DIR=/usr/local/opt/libxml2/include/libxml2 \
        -DENABLE_COMP=ON \
        -DENABLE_FBC=ON \
        -DENABLE_GROUPS=ON \
        -DENABLE_LAYOUT=ON \
        -DENABLE_MULTI=ON \
        -DENABLE_QUAL=ON \
        -DENABLE_RENDER=ON \
        -DENABLE_DISTRIB=ON \
        -DWITH_CPP_NAMESPACE=ON \
        ..
        make
        cd ../..
        
    - name: Install libSBML
      run: |
        cd libSBML-5.19.0-Source/build
        sudo make install
          
    - name: Build binary
      run: |
        rm -fr engine/pub/*
        cd engine/src
        make clean
        make install_static CXX=g++ SBML_COMPAT=1
        make install_static CXX=g++ MAXNODES=128 SBML_COMPAT=1
        make install_static CXX=g++ MAXNODES=256 SBML_COMPAT=1
        make install_static CXX=g++ MAXNODES=512 SBML_COMPAT=1
        make install_static CXX=g++ MAXNODES=1024 SBML_COMPAT=1
        cd ../pub
        zip MaBoSS-osx64.zip *
    
    - uses: actions/upload-artifact@v2
      if: github.event_name != 'release'
      with:
        name: MaBoSS-osx64
        path: /Users/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/pub/MaBoSS-osx64.zip
            
    - uses: actions/upload-release-asset@v1
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: MaBoSS-osx64.zip
        asset_path: /Users/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/pub/MaBoSS-osx64.zip
        asset_content_type: application/zip
        
  maboss_library:
    name: Building MaBoSS osx library
    runs-on: macos-10.15
    needs: [maboss, maboss_llvm]
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run : |
        brew install flex bison gcc
        gcc --version
        gcc-11 --version
              
    - name: Build library
      run: |
        rm -fr engine/pub/*
        cd engine/src
        make clean
        make install_lib CXX=g++-11
        make install_lib MAXNODES=128 CXX=g++-11
        make install_lib MAXNODES=256 CXX=g++-11
        make install_lib MAXNODES=512 CXX=g++-11
        make install_lib MAXNODES=1024 CXX=g++-11
        make install_alib CXX=g++-11
        make install_alib MAXNODES=128 CXX=g++-11
        make install_alib MAXNODES=256 CXX=g++-11
        make install_alib MAXNODES=512 CXX=g++-11
        make install_alib MAXNODES=1024 CXX=g++-11
        make clean
        cd ../../../
        tar -zcvf libMaBoSS-osx64.tar.gz MaBoSS-env-2.0/README.md MaBoSS-env-2.0/LICENSE MaBoSS-env-2.0/engine/src MaBoSS-env-2.0/engine/include MaBoSS-env-2.0/engine/lib
        
    - uses: actions/upload-artifact@v2
      if: github.event_name != 'release'
      with:
        name: libMaBoSS-osx64
        path: /Users/runner/work/MaBoSS-env-2.0/libMaBoSS-osx64.tar.gz
        
    - uses: actions/upload-release-asset@v1
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: libMaBoSS-osx64.tar.gz
        asset_path: /Users/runner/work/MaBoSS-env-2.0/libMaBoSS-osx64.tar.gz
        asset_content_type: application/gzip
        
  conda_maboss:
    name: Build Conda MaBoSS package
    runs-on: macos-latest
    needs: [maboss, maboss_llvm]
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Installing conda-build      
      run: |
        conda update conda
        conda update conda --all
        conda install conda-build conda-verify

    - name: Downgrading XCode to 11.7
      run: |
        sudo xcode-select -s /Applications/Xcode_11.7.app/Contents/Developer
        brew reinstall llvm    

    - name: Build MaBoSS Anaconda package
      run: |
        conda build -c colomoto conda/maboss
          
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/local/miniconda/conda-bld/osx-64/*
        key: ${{ runner.os }}-maboss-conda-${{ github.run_id }}
        
  conda_maboss_conda_forge:
    name: Build Conda MaBoSS package (conda-forge)
    runs-on: macos-latest
    needs: [maboss, maboss_llvm]
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1

    - name: Installing conda-build      
      run: |
        conda update conda
        conda config --add channels conda-forge
        conda config --set channel_priority strict
        conda update conda --all
        conda install conda-build conda-verify

    - name: Build MaBoSS Anaconda package
      run: |
        CUSTOM_BUILD_NUMBER=1 conda build -c colomoto conda/maboss
          
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/local/miniconda/conda-bld/osx-64/*
        key: ${{ runner.os }}-maboss-conda-forge-${{ github.run_id }}
   
  maboss_conda_test:
    name: MaBoSS Anaconda package test
    runs-on: macos-latest
    needs: conda_maboss
    
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Install conda-build
      run: |
        conda update conda
        conda update conda --all
        conda install conda-build anaconda-client
      
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/local/miniconda/conda-bld/osx-64/*
        key: ${{ runner.os }}-maboss-conda-${{ github.run_id }}
        
    - name: Install package
      run: |
        conda index /usr/local/miniconda/conda-bld
        conda install -c colomoto maboss --use-local
      
    - name: Test package
      run: |
        pip install numpy
        export MABOSS=/usr/local/miniconda/bin/MaBoSS
        export MABOSS_128n=/usr/local/miniconda/bin/MaBoSS_128n
        export MABOSS_CLIENT=/usr/local/miniconda/bin/MaBoSS-client
        export MABOSS_SERVER=/usr/local/miniconda/bin/MaBoSS-server
        export MABOSS_SERVER_128n=/usr/local/miniconda/bin/MaBoSS_128n-server
        bash -c "cd engine/tests; bash ./test-cellcycle.sh"
        bash -c "cd engine/tests; bash ./test-ensemble.sh"
        bash -c "cd engine/tests; bash ./test-ewing.sh"
        bash -c "cd engine/tests; bash ./test-server.sh"
        bash -c "cd engine/tests; bash ./test-prngs.sh"
        bash -c "cd engine/tests; bash ./test-rngs.sh"
        bash -c "cd engine/tests; bash ./test-sbml.sh"
  
  maboss_conda_test_conda_forge:
    name: MaBoSS Anaconda package test (conda-forge)
    runs-on: macos-latest
    needs: conda_maboss_conda_forge
    
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Install conda-build
      run: |
        conda update conda
        conda config --add channels conda-forge
        conda config --set channel_priority strict
        conda update conda --all
        conda install conda-build anaconda-client
      
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/local/miniconda/conda-bld/osx-64/*
        key: ${{ runner.os }}-maboss-conda-forge-${{ github.run_id }}
        
    - name: Install package
      run: |
        conda index /usr/local/miniconda/conda-bld
        conda install -c colomoto maboss --use-local
      
    - name: Test package
      run: |
        pip install numpy
        export MABOSS=/usr/local/miniconda/bin/MaBoSS
        export MABOSS_128n=/usr/local/miniconda/bin/MaBoSS_128n
        export MABOSS_CLIENT=/usr/local/miniconda/bin/MaBoSS-client
        export MABOSS_SERVER=/usr/local/miniconda/bin/MaBoSS-server
        export MABOSS_SERVER_128n=/usr/local/miniconda/bin/MaBoSS_128n-server
        bash -c "cd engine/tests; bash ./test-cellcycle.sh"
        bash -c "cd engine/tests; bash ./test-ensemble.sh"
        bash -c "cd engine/tests; bash ./test-ewing.sh"
        bash -c "cd engine/tests; bash ./test-server.sh"
        bash -c "cd engine/tests; bash ./test-prngs.sh"
        bash -c "cd engine/tests; bash ./test-rngs.sh"
        bash -c "cd engine/tests; bash ./test-sbml.sh"
    
  maboss_conda_publish:
    name: MaBoSS Anaconda package publication
    runs-on: macos-latest
    needs: maboss_conda_test
    
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Install conda-build
      run: |
        conda update conda
        conda update conda --all
        conda install conda-build anaconda-client
      
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/local/miniconda/conda-bld/osx-64/*
        key: ${{ runner.os }}-maboss-conda-${{ github.run_id }}
        
    
    - name: Upload MaBoSS to Anaconda cloud on vincent-noel
      if: github.repository == 'vincent-noel/MaBoSS-env-2.0' && github.ref == 'refs/heads/master'
      run: |   
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u vincent-noel /usr/local/miniconda/conda-bld/osx-64/*.tar.bz2 --force;
 
    
    - name: Upload MaBoSS to Anaconda cloud on colomoto
      if: github.repository == 'sysbio-curie/MaBoSS-env-2.0' && github.event_name == 'release'
      run: |   
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u colomoto /usr/local/miniconda/conda-bld/osx-64/*.tar.bz2 --force;
 
  maboss_conda_publish_conda_forge:
    name: MaBoSS Anaconda package publication (conda-forge)
    runs-on: macos-latest
    needs: maboss_conda_test_conda_forge
    
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Install conda-build
      run: |
        conda update conda
        conda config --add channels conda-forge
        conda config --set channel_priority strict
        conda update conda --all
        conda install conda-build anaconda-client
      
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/local/miniconda/conda-bld/osx-64/*
        key: ${{ runner.os }}-maboss-conda-forge-${{ github.run_id }}
        
    
    - name: Upload MaBoSS to Anaconda cloud on vincent-noel
      if: github.repository == 'vincent-noel/MaBoSS-env-2.0' && github.ref == 'refs/heads/master'
      run: |   
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u vincent-noel /usr/local/miniconda/conda-bld/osx-64/*.tar.bz2 --force;
 
    
    - name: Upload MaBoSS to Anaconda cloud on colomoto
      if: github.repository == 'sysbio-curie/MaBoSS-env-2.0' && github.event_name == 'release'
      run: |   
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u colomoto /usr/local/miniconda/conda-bld/osx-64/*.tar.bz2 --force;
 
###################################################################################################
# cMaBoSS                                                                                         #
###################################################################################################                        
  cmaboss:
    name: cMaBoSS
    runs-on: macos-11.0

    steps:
    - uses: actions/checkout@v2
        
    - name: Install dependencies
      run: |
        brew install flex bison python3 libxml2 cmake
        pip3 install numpy
        
    - name: Get cmake version
      id: get-cmake-version
      run: |
        echo "::set-output name=version::$(cmake --version | head -n 1 | cut -d' ' -f 3)"
      shell: bash

    - name: Get xcode version
      id: get-xcode-version
      run: |
        echo "::set-output name=version::$(xcodebuild -version | sed -En 's/Xcode[[:space:]]+([0-9\.]*)/\1/p')"
      shell: bash
      

    - name: Cache compiled libSBML
      id: cache-libsbml-clang
      uses: actions/cache@v2
      with:
        path: /Users/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/libSBML-5.19.0-Source
        key: ${{ runner.os }}-libSBML-5.19-clang++-namespace-${{ steps.get-cmake-version.outputs.version }}-${{ steps.get-xcode-version.outputs.version }}

    - name: Compiling libSBML
      if: steps.cache-libsbml-clang.outputs.cache-hit != 'true'
      run: |
        wget https://sourceforge.net/projects/sbml/files/libsbml/5.19.0/stable/libSBML-5.19.0-core-plus-packages-src.tar.gz
        tar -zxf libSBML-5.19.0-core-plus-packages-src.tar.gz
        cd libSBML-5.19.0-Source
        mkdir build
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DCMAKE_INSTALL_LIBDIR=/usr/local/lib \
        -DCMAKE_CXX_COMPILER=clang++ \
        -DCMAKE_C_COMPILER=clang \
        -DCMAKE_CXX_STANDARD_LIBRARIES=-lxml2 \
        -DWITH_SWIG=OFF \
        -DLIBXML_LIBRARY=/usr/local/opt/libxml2/lib \
        -DLIBXML_INCLUDE_DIR=/usr/local/opt/libxml2/include/libxml2 \
        -DENABLE_COMP=ON \
        -DENABLE_FBC=ON \
        -DENABLE_GROUPS=ON \
        -DENABLE_LAYOUT=ON \
        -DENABLE_MULTI=ON \
        -DENABLE_QUAL=ON \
        -DENABLE_RENDER=ON \
        -DENABLE_DISTRIB=ON \
        -DWITH_CPP_NAMESPACE=ON \
        .. 
        make 
        cd ../..
    
    - name: Install libSBML
      run: |
        cd libSBML-5.19.0-Source/build
        sudo make install
    
    - name: Build cMaBoSS
      run: |
        cd engine/src
        make
        cd ../python
        cp -r ../src cmaboss
        pip3 install .
        cd ../..
    
    - name: Test cMaBoSS
      run: |
        cd engine/tests
        python3 -m unittest test
        python3 -m unittest test_128n
  
  conda_cmaboss:
    name: cMaBoSS Conda package
    runs-on: macos-10.15
    needs: cmaboss
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Install conda-build
      run: |
        conda update conda
        conda update --all
        conda install conda-build conda-verify
      
    - name: Downgrading XCode to 11.7
      run: |
        sudo xcode-select -s /Applications/Xcode_11.7.app/Contents/Developer
        brew reinstall llvm    
    
    - name: Build cMaBoSS Anaconda package
      run: |
        conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\"], \"numpy\": \"1.16\"}" conda/cmaboss;
        conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\", \"3.8\"], \"numpy\": \"1.17\"}" conda/cmaboss;
        conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\", \"3.8\"], \"numpy\": \"1.18\"}" conda/cmaboss;
        conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\", \"3.8\", \"3.9\"], \"numpy\": \"1.19\"}" conda/cmaboss;
        conda build -c colomoto --variants "{\"python\": [\"3.7\", \"3.8\", \"3.9\"], \"numpy\": \"1.20\"}" conda/cmaboss;
        conda build -c colomoto --variants "{\"python\": [\"3.7\", \"3.8\", \"3.9\", \"3.10\"], \"numpy\": \"1.21\"}" conda/cmaboss;
        
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/local/miniconda/conda-bld/osx-64/*
        key: ${{ runner.os }}-cmaboss-conda-${{ github.run_id }}
    
  conda_cmaboss_conda_forge:
    name: cMaBoSS Conda package (conda-forge)
    runs-on: macos-10.15
    needs: cmaboss
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Install conda-build
      run: |
        conda update conda
        conda config --add channels conda-forge
        conda config --set channel_priority strict
        conda update --all
        conda install conda-build conda-verify
      
    - name: Build cMaBoSS Anaconda package
      run: |
        CUSTOM_BUILD_NUMBER=1 conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\"], \"numpy\": \"1.16\"}" conda/cmaboss;
        CUSTOM_BUILD_NUMBER=1 conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\", \"3.8\"], \"numpy\": \"1.17\"}" conda/cmaboss;
        CUSTOM_BUILD_NUMBER=1 conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\", \"3.8\"], \"numpy\": \"1.18\"}" conda/cmaboss;
        CUSTOM_BUILD_NUMBER=1 conda build -c colomoto --variants "{\"python\": [\"3.6\", \"3.7\", \"3.8\", \"3.9\"], \"numpy\": \"1.19\"}" conda/cmaboss;
        CUSTOM_BUILD_NUMBER=1 conda build -c colomoto --variants "{\"python\": [\"3.7\", \"3.8\", \"3.9\"], \"numpy\": \"1.20\"}" conda/cmaboss;
        CUSTOM_BUILD_NUMBER=1 conda build -c colomoto --variants "{\"python\": [\"3.7\", \"3.8\", \"3.9\", \"3.10\"], \"numpy\": \"1.21\"}" conda/cmaboss;
        
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/local/miniconda/conda-bld/osx-64/*
        key: ${{ runner.os }}-cmaboss-conda-forge-${{ github.run_id }}
    
    
  cmaboss_conda_test:
    name: cMaBoSS Anaconda package test
    runs-on: macos-10.15
    needs: conda_cmaboss
    
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Install conda-build
      run: |
        conda update conda
        conda update conda --all
        conda install conda-build anaconda-client
      
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/local/miniconda/conda-bld/osx-64/*
        key: ${{ runner.os }}-cmaboss-conda-${{ github.run_id }}
    
    - name: Install package
      run: |
        conda index /usr/local/miniconda/conda-bld
        conda install -c colomoto cmaboss --use-local
      
    - name: Test package
      run: |
        cd engine/tests
        python -m unittest test
        python -m unittest test_128n
        
  cmaboss_conda_test_conda_forge:
    name: cMaBoSS Anaconda package test (conda-forge)
    runs-on: macos-10.15
    needs: conda_cmaboss_conda_forge
    
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Install conda-build
      run: |
        conda update conda
        conda config --add channels conda-forge
        conda config --set channel_priority strict
        conda update conda --all
        conda install conda-build anaconda-client
      
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/local/miniconda/conda-bld/osx-64/*
        key: ${{ runner.os }}-cmaboss-conda-forge-${{ github.run_id }}
    
    - name: Install package
      run: |
        conda index /usr/local/miniconda/conda-bld
        conda install -c colomoto cmaboss --use-local
      
    - name: Test package
      run: |
        cd engine/tests
        python -m unittest test
        python -m unittest test_128n
  
  cmaboss_conda_publish:
    name: cMaBoSS Anaconda package publication
    runs-on: macos-10.15
    needs: cmaboss_conda_test
    
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Install conda-build
      run: |
        conda update conda
        conda update conda --all
        conda install conda-build anaconda-client
      
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/local/miniconda/conda-bld/osx-64/*
        key: ${{ runner.os }}-cmaboss-conda-${{ github.run_id }}
    
    - name: Upload MaBoSS to Anaconda cloud on vincent-noel
      if: github.repository == 'vincent-noel/MaBoSS-env-2.0' && github.ref == 'refs/heads/master'
      run: |   
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u vincent-noel /usr/local/miniconda/conda-bld/osx-64/*.tar.bz2 --force;
 
    
    - name: Upload MaBoSS to Anaconda cloud on colomoto
      if: github.repository == 'sysbio-curie/MaBoSS-env-2.0' && github.event_name == 'release'
      run: |   
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u colomoto /usr/local/miniconda/conda-bld/osx-64/*.tar.bz2 --force;
 
  cmaboss_conda_publish_conda_forge:
    name: cMaBoSS Anaconda package publication (conda-forge)
    runs-on: macos-10.15
    needs: cmaboss_conda_test_conda_forge
    
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    
    - name: Install conda-build
      run: |
        conda update conda
        conda config --add channels conda-forge
        conda config --set channel_priority strict
        conda update conda --all
        conda install conda-build anaconda-client
      
    - name: Caching produced conda package
      uses: actions/cache@v2
      with:
        path: |
          /usr/local/miniconda/conda-bld/osx-64/*
        key: ${{ runner.os }}-cmaboss-conda-forge-${{ github.run_id }}
    
    - name: Upload MaBoSS to Anaconda cloud on vincent-noel
      if: github.repository == 'vincent-noel/MaBoSS-env-2.0' && github.ref == 'refs/heads/master'
      run: |   
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u vincent-noel /usr/local/miniconda/conda-bld/osx-64/*.tar.bz2 --force;
 
    
    - name: Upload MaBoSS to Anaconda cloud on colomoto
      if: github.repository == 'sysbio-curie/MaBoSS-env-2.0' && github.event_name == 'release'
      run: |   
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u colomoto /usr/local/miniconda/conda-bld/osx-64/*.tar.bz2 --force;
            
  cmaboss_pypi:
    name: cMaBoSS PyPi package on MacOSX 10.15
    runs-on: macos-10.15
    needs: cmaboss
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'

    strategy:
      matrix:
        python:
          - 3.6.12
          - 3.7.9
          - 3.8.6
          - 3.9.0
    steps:
    - uses: actions/checkout@v2
    
    - name: Install packages
      run: |
        brew install flex bison gcc libxml2 cmake pyenv
        
    - name: Install python
      run: |
        pyenv install ${{ matrix.python }}
        echo "/Users/runner/.pyenv/shims" >> $GITHUB_PATH
        pyenv global ${{ matrix.python }}
        
    - name: Install python libraries 
      run: |
        python -m pip install twine wheel numpy delocate
        pyenv rehash

    - name: Get cmake version
      id: get-cmake-version
      run: |
        echo "::set-output name=version::$(cmake --version | head -n 1 | cut -d' ' -f 3)"
      shell: bash

    - name: Get xcode version
      id: get-xcode-version
      run: |
        echo "::set-output name=version::$(xcodebuild -version | sed -En 's/Xcode[[:space:]]+([0-9\.]*)/\1/p')"
      shell: bash
      
    - name: Cache compiled libSBML
      id: cache-libsbml-clang
      uses: actions/cache@v2
      with:
        path: /Users/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/libSBML-5.19.0-Source
        key: ${{ runner.os }}-libSBML-5.19-clang++-namespace-${{ steps.get-cmake-version.outputs.version }}-${{ steps.get-xcode-version.outputs.version }}

    - name: Compiling libSBML
      if: steps.cache-libsbml-clang.outputs.cache-hit != 'true'
      run: |
        wget https://sourceforge.net/projects/sbml/files/libsbml/5.19.0/stable/libSBML-5.19.0-core-plus-packages-src.tar.gz
        tar -zxf libSBML-5.19.0-core-plus-packages-src.tar.gz
        cd libSBML-5.19.0-Source
        mkdir build
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DCMAKE_INSTALL_LIBDIR=/usr/local/lib \
        -DCMAKE_CXX_COMPILER=g++ \
        -DCMAKE_C_COMPILER=gcc \
        -DCMAKE_CXX_STANDARD_LIBRARIES=-lxml2 \
        -DWITH_SWIG=OFF \
        -DLIBXML_LIBRARY=/usr/local/opt/libxml2/lib \
        -DLIBXML_INCLUDE_DIR=/usr/local/opt/libxml2/include/libxml2 \
        -DENABLE_COMP=ON \
        -DENABLE_FBC=ON \
        -DENABLE_GROUPS=ON \
        -DENABLE_LAYOUT=ON \
        -DENABLE_MULTI=ON \
        -DENABLE_QUAL=ON \
        -DENABLE_RENDER=ON \
        -DENABLE_DISTRIB=ON \
        -DWITH_CPP_NAMESPACE=ON \
        .. 
        make 
        cd ../..
        
    - name: Install libSBML
      run: |
        cd libSBML-5.19.0-Source/build
        sudo make install
    
    - name: Compile MaBoSS
      run: |
        cd engine/src; make
        cd ../python; cp -r ../src cmaboss/
        cd ../..
    
    - name: Cache wheel
      uses: actions/cache@v2
      with:
        path: /Users/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/fixed_wheels/*
        key: ${{ runner.os }}-wheel-${{ matrix.python }}-${{ github.run_id }}

    - name: Build cMaBoSS
      run: |
        cd engine/python
        python -m pip wheel -w wheelhouse .
        
    - name: Fix wheel dependencies
      run: |
        cd engine/python
        cp /usr/local/lib/libsbml*.dylib .
        delocate-wheel -w fixed_wheels -v `ls wheelhouse/cmaboss*.whl`
        ls -al fixed_wheels

  cmaboss_wheel_test:
    name: cMaBoSS Wheel test on MacOSX 10.15
    runs-on: macos-10.15
    needs: cmaboss_pypi
    strategy:
      matrix:
        python:
          - 3.6.12
          - 3.7.9
          - 3.8.6
          - 3.9.0
    steps:
    - uses: actions/checkout@v2
    
    - name: Install packages
      run: |
        brew install flex bison gcc libxml2 cmake pyenv
        
    - name: Install python
      run: |
        pyenv install ${{ matrix.python }}
        echo "/Users/runner/.pyenv/shims" >> $GITHUB_PATH
        pyenv global ${{ matrix.python }}

    - name: Install python dependencies
      run: |
        python -m pip install twine wheel numpy delocate
        pyenv rehash

    - name: Cache wheel
      uses: actions/cache@v2
      with:
        path: /Users/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/fixed_wheels/*
        key: ${{ runner.os }}-wheel-${{ matrix.python }}-${{ github.run_id }}

    - name: Install wheel
      run: |
        cd engine/python
        ls -al fixed_wheels
        unzip -l fixed_wheels/*.whl
        python -m pip install -f fixed_wheels --no-index cmaboss
        
    - name: Test wheel
      run: |
        cd engine/tests
        python -m unittest test
        python -m unittest test_128n
       
  cmaboss_wheel_publish:
    name: cMaBoSS Wheel publish on MacOSX 10.15
    runs-on: macos-10.15
    needs: cmaboss_wheel_test
    strategy:
      matrix:
        python:
          - 3.6.12
          - 3.7.9
          - 3.8.6
          - 3.9.0
    
    steps:
    - uses: actions/checkout@v2
    - name: Install packages
      run: |
        brew install flex bison gcc libxml2 cmake pyenv
        
    - name: Install python
      run: |
        pyenv install ${{ matrix.python }}
        echo "/Users/runner/.pyenv/shims" >> $GITHUB_PATH
        pyenv global ${{ matrix.python }}

    - name: Install python dependencies
      run: |
        python -m pip install twine
        pyenv rehash
        
    - name: Cache wheel
      uses: actions/cache@v2
      with:
        path: /Users/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/fixed_wheels/*
        key: ${{ runner.os }}-wheel-${{ matrix.python }}-${{ github.run_id }}
        
    - name: Upload cMaBoSS to test Pypi
      if: github.repository == 'vincent-noel/MaBoSS-env-2.0' && github.ref == 'refs/heads/master'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_TOKEN }}
      run: |
        cd engine/python
        python -m twine upload --repository testpypi --skip-existing fixed_wheels/cmaboss*
        
    - name: Upload cMaBoSS to Pypi
      if: github.repository == 'sysbio-curie/MaBoSS-env-2.0' && github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        cd engine/python
        python -m twine upload --skip-existing fixed_wheels/cmaboss*
        
  cmaboss_pypi_macos11:
    name: cMaBoSS PyPi package on MacOSX 11
    runs-on: macos-11
    needs: cmaboss
    if: github.ref == 'refs/heads/master' || github.event_name == 'release'

    strategy:
      matrix:
        python:
          - 3.7.12
          - 3.8.12
          - 3.9.9
          - 3.10.0
    steps:
    - uses: actions/checkout@v2
    
    - name: Install packages
      run: |
        brew install flex bison gcc libxml2 cmake pyenv
        
    - name: Install python
      run: |
        pyenv install ${{ matrix.python }}
        echo "/Users/runner/.pyenv/shims" >> $GITHUB_PATH
        pyenv global ${{ matrix.python }}

    - name: Install python libraries 
      run: |
        python -m pip install twine wheel numpy delocate
        pyenv rehash

    - name: Get cmake version
      id: get-cmake-version
      run: |
        echo "::set-output name=version::$(cmake --version | head -n 1 | cut -d' ' -f 3)"
      shell: bash

    - name: Get xcode version
      id: get-xcode-version
      run: |
        echo "::set-output name=version::$(xcodebuild -version | sed -En 's/Xcode[[:space:]]+([0-9\.]*)/\1/p')"
      shell: bash
      
    - name: Cache compiled libSBML
      id: cache-libsbml-clang
      uses: actions/cache@v2
      with:
        path: /Users/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/libSBML-5.19.0-Source
        key: ${{ runner.os }}-libSBML-5.19-clang++-namespace-${{ steps.get-cmake-version.outputs.version }}-${{ steps.get-xcode-version.outputs.version }}

    - name: Compiling libSBML
      if: steps.cache-libsbml-clang.outputs.cache-hit != 'true'
      run: |
        wget https://sourceforge.net/projects/sbml/files/libsbml/5.19.0/stable/libSBML-5.19.0-core-plus-packages-src.tar.gz
        tar -zxf libSBML-5.19.0-core-plus-packages-src.tar.gz
        cd libSBML-5.19.0-Source
        mkdir build
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DCMAKE_INSTALL_LIBDIR=/usr/local/lib \
        -DCMAKE_CXX_COMPILER=g++ \
        -DCMAKE_C_COMPILER=gcc \
        -DCMAKE_CXX_STANDARD_LIBRARIES=-lxml2 \
        -DWITH_SWIG=OFF \
        -DLIBXML_LIBRARY=/usr/local/opt/libxml2/lib \
        -DLIBXML_INCLUDE_DIR=/usr/local/opt/libxml2/include/libxml2 \
        -DENABLE_COMP=ON \
        -DENABLE_FBC=ON \
        -DENABLE_GROUPS=ON \
        -DENABLE_LAYOUT=ON \
        -DENABLE_MULTI=ON \
        -DENABLE_QUAL=ON \
        -DENABLE_RENDER=ON \
        -DENABLE_DISTRIB=ON \
        -DWITH_CPP_NAMESPACE=ON \
        .. 
        make 
        cd ../..
        
    - name: Install libSBML
      run: |
        cd libSBML-5.19.0-Source/build
        sudo make install
    
    - name: Compile MaBoSS
      run: |
        cd engine/src; make
        cd ../python; cp -r ../src cmaboss/
        cd ../..
    
    - name: Cache wheel
      uses: actions/cache@v2
      with:
        path: /Users/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/fixed_wheels/*
        key: ${{ runner.os }}-wheel-${{ matrix.python }}-${{ github.run_id }}

    - name: Build cMaBoSS
      run: |
        cd engine/python
        python -m pip wheel -w wheelhouse .
        
    - name: Fix wheel dependencies
      run: |
        cd engine/python
        cp /usr/local/lib/libsbml*.dylib .
        delocate-wheel -w fixed_wheels -v `ls wheelhouse/cmaboss*.whl`
        ls -al fixed_wheels

  cmaboss_wheel_test_macos11:
    name: cMaBoSS Wheel test on MacOSX 11
    runs-on: macos-11
    needs: cmaboss_pypi_macos11
    strategy:
      matrix:
        python:
          - 3.7.12
          - 3.8.12
          - 3.9.9
          - 3.10.0
    steps:
    - uses: actions/checkout@v2
    
    - name: Install packages
      run: |
        brew install flex bison gcc libxml2 cmake pyenv
        
    - name: Install python
      run: |
        pyenv install ${{ matrix.python }}
        echo "/Users/runner/.pyenv/shims" >> $GITHUB_PATH
        pyenv global ${{ matrix.python }}
        
    - name: Install python dependencies
      run: |
        python -m pip install twine wheel numpy delocate
        pyenv rehash

    - name: Cache wheel
      uses: actions/cache@v2
      with:
        path: /Users/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/fixed_wheels/*
        key: ${{ runner.os }}-wheel-${{ matrix.python }}-${{ github.run_id }}

    - name: Install wheel
      run: |
        cd engine/python
        ls -al fixed_wheels
        unzip -l fixed_wheels/*.whl
        python -m pip install -f fixed_wheels --no-index cmaboss
        
    - name: Test wheel
      run: |
        cd engine/tests
        python -m unittest test
        python -m unittest test_128n
       
  cmaboss_wheel_publish_macos11:
    name: cMaBoSS Wheel publish on MacOSX 11
    runs-on: macos-11
    needs: cmaboss_wheel_test_macos11
    strategy:
      matrix:
        python:
          - 3.7.12
          - 3.8.12
          - 3.9.9
          - 3.10.0
    
    steps:
    - uses: actions/checkout@v2
    - name: Install packages
      run: |
        brew install flex bison gcc libxml2 cmake pyenv
        
    - name: Install python
      run: |
        pyenv install ${{ matrix.python }}
        echo "/Users/runner/.pyenv/shims" >> $GITHUB_PATH
        pyenv global ${{ matrix.python }}
        
    - name: Install python dependencies
      run: |
        python -m pip install twine
        pyenv rehash
        
    - name: Cache wheel
      uses: actions/cache@v2
      with:
        path: /Users/runner/work/MaBoSS-env-2.0/MaBoSS-env-2.0/engine/python/fixed_wheels/*
        key: ${{ runner.os }}-wheel-${{ matrix.python }}-${{ github.run_id }}
        
    - name: Upload cMaBoSS to test Pypi
      if: github.repository == 'vincent-noel/MaBoSS-env-2.0' && github.ref == 'refs/heads/master'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_TOKEN }}
      run: |
        cd engine/python
        twine upload --repository testpypi --skip-existing fixed_wheels/cmaboss*
        
    - name: Upload cMaBoSS to Pypi
      if: github.repository == 'sysbio-curie/MaBoSS-env-2.0' && github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        cd engine/python
        twine upload --skip-existing fixed_wheels/cmaboss*