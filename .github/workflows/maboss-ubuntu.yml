name: Linux

on:
  push:
  pull_request:
  release:
    types: [created]

jobs:
  maboss:
    name: MaBoSS (gcc)
    runs-on: ubuntu-22.04
    env:
      CC: gcc
      CXX: g++
      INSTALL_PATH: /usr/
      BUILD_PATH: /tmp/
      LIBXML_LIBDIR: /usr/lib/x86_64-linux-gnu/libxml2.so
      LIBXML_INCLUDEDIR: /usr/include/libxml2/
      CPU_COUNT: 4
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install flex bison libhdf5-dev
        pip install numpy
    
    - name: Cache compiled libSBML
      id: cache-libsbml-gcc
      uses: actions/cache@v4
      with:
        path: /tmp/libsbml-5.20.4
        key: ${{ runner.os }}-libSBML-5.20.4-gcc-namespace

    - name: Compiling libSBML
      if: steps.cache-libsbml-gcc.outputs.cache-hit != 'true'
      run: bash scripts/build_libsbml.sh
        
    - name: Install libSBML
      run: sudo bash scripts/install_libsbml.sh

    - name: Build MaBoSS
      run: |
        cd engine/src
        make clean
        make install SBML_COMPAT=1 CLIENT_SERVER=1 -j "${CPU_COUNT}"
        make MAXNODES=128 install SBML_COMPAT=1 CLIENT_SERVER=1 -j "${CPU_COUNT}"
    
    - name: Test MaBoSS
      run: |
        bash scripts/run_tests.sh
        bash scripts/run_sbml_tests.sh
        bash scripts/run_userfunc_tests.sh
  
  maboss_cmake:
    name: MaBoSS (cmake)
    runs-on: ubuntu-22.04
    env:
      CC: gcc
      CXX: g++
      INSTALL_PATH: /usr/
      BUILD_PATH: /tmp/
      LIBXML_LIBDIR: /usr/lib/x86_64-linux-gnu/libxml2.so
      LIBXML_INCLUDEDIR: /usr/include/libxml2/
      CPU_COUNT: 4
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install flex bison libhdf5-dev
        pip install numpy
    
    - name: Cache compiled libSBML
      id: cache-libsbml-gcc
      uses: actions/cache@v4
      with:
        path: /tmp/libsbml-5.20.4
        key: ${{ runner.os }}-libSBML-5.20.4-gcc-namespace

    - name: Compiling libSBML
      if: steps.cache-libsbml-gcc.outputs.cache-hit != 'true'
      run: bash scripts/build_libsbml.sh
        
    - name: Install libSBML
      run: sudo bash scripts/install_libsbml.sh

    - name: Build MaBoSS
      run: |
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=engine \
          -DSBML=1 -DBUILD_SERVER=1 -DBUILD_CLIENT=1
        cmake --build build --parallel "${CPU_COUNT}" --verbose
        cmake --install build --component executables 
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=engine \
          -DMAXNODES=128 \
          -DSBML=1 -DBUILD_SERVER=1
        cmake --build build --parallel "${CPU_COUNT}" --verbose
        cmake --install build --component executables 
        
    - name: Test MaBoSS
      env:
        MABOSS_BIN_PATH: ../bin
      run: |
        bash scripts/run_tests.sh 
        bash scripts/run_sbml_tests.sh
        bash scripts/run_userfunc_tests.sh cmake
      
  maboss_cmake_sedml:
    name: MaBoSS (cmake) with SEDML support
    runs-on: ubuntu-22.04
    env:
      CC: gcc
      CXX: g++
      INSTALL_PATH: /usr/
      BUILD_PATH: /tmp/
      LIBXML_LIBDIR: /usr/lib/x86_64-linux-gnu/libxml2.so
      LIBXML_INCLUDEDIR: /usr/include/libxml2/
      CPU_COUNT: 4
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install flex bison libhdf5-dev
        pip install numpy
    
    - name: Download libsedml and deps
      run: |
        git clone --recurse-submodules https://github.com/fbergmann/libSEDML.git /opt/libSEDML
        
    - name: Build libsbml dependencies
      run: |
        cd /opt/libSEDML/submodules/libSBML-dependencies 
        cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DWITH_LIBXML=ON \
            -DWITH_ZLIB=ON \
            -DWITH_ICONV=ON \
            -DWITH_BZIP2=ON \
            -DLIBXML2_WITH_ZLIB=ON 
        cmake --build build --parallel "${CPU_COUNT}" 
        sudo cmake --install build
        
    - name: Build libsbml
      run: |   
        cd /opt/libSEDML/submodules/libSBML 
        git checkout 7c26715 
        cmake -B build -S . -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DWITH_STABLE_PACKAGES=ON \
          -DWITH_CPP_NAMESPACE=ON \
          -DWITH_ZLIB=ON \
          -DLIBSBML_SKIP_SHARED_LIBRARY=ON 
        cmake --build build --parallel "${CPU_COUNT}" 
        sudo cmake --install build
      
    - name: Build libnuml
      run: |
        cd /opt/libSEDML/submodules/NuML/libnuml 
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DWITH_CPP_NAMESPACE=ON \
          -DLIBNUML_SKIP_SHARED_LIBRARY=ON 
        cmake --build build --parallel "${CPU_COUNT}" 
        sudo cmake --install build
    
    - name: Build libsedml
      run: |
        cd /opt/libSEDML/ 
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DWITH_CPP_NAMESPACE=ON \
          -DEXTRA_LIBS="/usr/lib/x86_64-linux-gnu/libxml2.a;/usr/lib/libbz2.a;/lib/libzlib.a" \
          -DBUILD_TESTS=OFF \
          -DLIBSEDML_SKIP_SHARED_LIBRARY=ON 
        cmake --build build --parallel "${CPU_COUNT}" 
        sudo cmake --install build


    - name: Build MaBoSS
      run: |
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=engine \
          -DSBML=1 -DSEDML=1 \
          -DBUILD_SERVER=1 -DBUILD_CLIENT=1
        cmake --build build --parallel "${CPU_COUNT}"
        cmake --install build --component executables 
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=engine \
          -DMAXNODES=128 \
          -DSBML=1 -DSEDML=1 \
          -DBUILD_SERVER=1
        cmake --build build --parallel "${CPU_COUNT}"
        cmake --install build --component executables 
        
    - name: Test MaBoSS
      env:
        MABOSS_BIN_PATH: ../bin
      run: |
        bash scripts/run_tests.sh 
        bash scripts/run_sbml_tests.sh
        bash scripts/run_userfunc_tests.sh cmake
   
  maboss_dynbitset_std_alloc:
    name: MaBoSS DynBitSet STD alloc (cmake)
    runs-on: ubuntu-22.04
    env:
      CC: gcc
      CXX: g++
      INSTALL_PATH: /usr/
      BUILD_PATH: /tmp/
      LIBXML_LIBDIR: /usr/lib/x86_64-linux-gnu/libxml2.so
      LIBXML_INCLUDEDIR: /usr/include/libxml2/
      CPU_COUNT: 4
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install flex bison libhdf5-dev
        pip install numpy
    
    - name: Cache compiled libSBML
      id: cache-libsbml-gcc
      uses: actions/cache@v4
      with:
        path: /tmp/libsbml-5.20.4
        key: ${{ runner.os }}-libSBML-5.20.4-gcc-namespace

    - name: Compiling libSBML
      if: steps.cache-libsbml-gcc.outputs.cache-hit != 'true'
      run: bash scripts/build_libsbml.sh
        
    - name: Install libSBML
      run: sudo bash scripts/install_libsbml.sh

    - name: Build MaBoSS
      run: |
        cmake -B build . \
          -DCMAKE_INSTALL_PREFIX=engine \
          -DSBML=1 \
          -DDYNBITSET=1 -DDYNBITSET_STD_ALLOC=1 \
          -DBUILD_SERVER=1 -DBUILD_CLIENT=1
        cmake --build build --parallel "${CPU_COUNT}"
        cmake --install build --component executables 
        
    - name: Test MaBoSS
      env:
        MABOSS_BIN_PATH: ../bin
        MABOSS: ../bin/MaBoSS_dn
        MABOSS_128n: ../bin/MaBoSS_dn
        MABOSS_SERVER: ../bin/MaBoSS_dn-server
        MABOSS_SERVER_128n: ../bin/MaBoSS_dn-server
        POPMABOSS: ../bin/PopMaBoSS_dn
      run: |
        bash scripts/run_tests.sh   
        bash scripts/run_sbml_tests.sh
        bash scripts/run_userfunc_tests.sh cmake
                
  maboss_llvm:
    name: MaBoSS (clang)
    runs-on: ubuntu-22.04
    env:
      CC: clang
      CXX: clang++
      INSTALL_PATH: /usr/
      BUILD_PATH: /tmp/
      LIBXML_LIBDIR: /usr/lib/x86_64-linux-gnu/libxml2.so
      LIBXML_INCLUDEDIR: /usr/include/libxml2/
      CPU_COUNT: 4
    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run : |
        sudo apt-get update
        sudo apt-get install flex bison clang libhdf5-dev
        pip install numpy
        
    - name: Cache compiled libSBML
      id: cache-libsbml-clang
      uses: actions/cache@v4
      with:
        path: /tmp/libsbml-5.20.4
        key: ${{ runner.os }}-libSBML-5.20.4-clang-namespace

    - name: Compiling libSBML
      if: steps.cache-libsbml-clang.outputs.cache-hit != 'true'
      run: bash scripts/build_libsbml.sh
        
    - name: Install libSBML
      run: sudo bash scripts/install_libsbml.sh
        
    - name: Build MaBoSS
      run: |
        cd engine/src
        make clean
        make CC=clang CXX=clang++ install SBML_COMPAT=1 CLIENT_SERVER=1 -j "${CPU_COUNT}"
        make CC=clang CXX=clang++ MAXNODES=128 install SBML_COMPAT=1 CLIENT_SERVER=1 -j "${CPU_COUNT}"
    
    - name: Test MaBoSS
      run: 
        bash scripts/run_tests.sh
        bash scripts/run_sbml_tests.sh
        bash scripts/run_userfunc_tests.sh
      
  maboss_mpi:
    name: MaBoSS MPI
    runs-on: ubuntu-22.04
    env: 
      CPU_COUNT: 4
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install flex bison libopenmpi-dev libhdf5-dev
        pip install numpy
    
    - name: Build MaBoSS
      run: |
        cd engine/src
        make clean
        make install CC=mpicc CXX=mpic++ MPI_COMPAT=1 -j "${CPU_COUNT}"
        make install CC=mpicc CXX=mpic++ MPI_COMPAT=1 MAXNODES=128 -j "${CPU_COUNT}"
        
    - name: Test MaBoSS
      run: bash scripts/run_mpi_tests.sh

  maboss_mpi_cmake:
    name: MaBoSS MPI (cmake)
    runs-on: ubuntu-22.04
    env: 
      CPU_COUNT: 4
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install flex bison libopenmpi-dev libhdf5-dev
        pip install numpy
    
    - name: Build MaBoSS
      run: |
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=engine \
          -DMPI=1
        cmake --build build --parallel "${CPU_COUNT}"
        cmake --install build --component executables
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=engine \
          -DMAXNODES=128 \
          -DMPI=1
        cmake --build build --parallel "${CPU_COUNT}"
        cmake --install build --component executables

    - name: Test MaBoSS
      env:
        MABOSS_BIN_PATH: ../bin
      run: bash scripts/run_mpi_tests.sh
      
  maboss_binary:
    name: Building MaBoSS linux64 binary
    runs-on: ubuntu-22.04
    needs: [maboss, maboss_llvm, maboss_cmake, maboss_mpi, maboss_mpi_cmake]
    env:  
      CC: gcc
      CXX: g++
      INSTALL_PATH: /usr/
      BUILD_PATH: /tmp/
      LIBXML_LIBDIR: /usr/lib/x86_64-linux-gnu/libxml2.so
      LIBXML_INCLUDEDIR: /usr/include/libxml2
      CPU_COUNT: 4
    # if: github.event.workflow_run.conclusion == 'success' && (github.ref == 'refs/heads/master' || github.event_name == 'release')

    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install flex bison
        pip install numpy
    
    - name: Cache compiled libSBML
      id: cache-libsbml-gcc
      uses: actions/cache@v4
      with:
        path: /tmp/libsbml-5.20.4
        key: ${{ runner.os }}-libSBML-5.20.4-gcc-namespace

    - name: Compiling libSBML
      if: steps.cache-libsbml-gcc.outputs.cache-hit != 'true'
      run: |
        bash scripts/build_libsbml.sh

    - name: Install libSBML
      run: |
        sudo env BUILD_PATH=/tmp/ bash scripts/install_libsbml.sh
          
    - name: Build binary
      run: |
        rm -fr engine/pub/*
        cd engine/src
        make clean
        make install_static SBML_COMPAT=1 CLIENT_SERVER=1 -j "${CPU_COUNT}"
        make install_static MAXNODES=128 SBML_COMPAT=1 CLIENT_SERVER=1 -j "${CPU_COUNT}"
        make install_static MAXNODES=256 SBML_COMPAT=1 CLIENT_SERVER=1 -j "${CPU_COUNT}"
        make install_static MAXNODES=512 SBML_COMPAT=1 CLIENT_SERVER=1 -j "${CPU_COUNT}"
        make install_static MAXNODES=1024 SBML_COMPAT=1 CLIENT_SERVER=1 -j "${CPU_COUNT}"
        cd ../pub
        zip MaBoSS-linux64.zip *
        
    - uses: actions/upload-artifact@v4
      if: github.event_name != 'release'
      with:
        name: MaBoSS-linux64
        path: /home/runner/work/MaBoSS/MaBoSS/engine/pub/MaBoSS-linux64.zip
        
    - uses: actions/upload-release-asset@v1
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: MaBoSS-linux64.zip
        asset_path: /home/runner/work/MaBoSS/MaBoSS/engine/pub/MaBoSS-linux64.zip
        asset_content_type: application/zip
  
  
  maboss_library:
    name: Building MaBoSS linux64 library
    runs-on: ubuntu-22.04
    needs: [maboss, maboss_llvm, maboss_cmake, maboss_mpi, maboss_mpi_cmake]

    env:
      CPU_COUNT: 4
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install flex bison
          
    - name: Build binary
      run: |
        rm -fr engine/pub/*
        cd engine/src
        make clean
        make install_lib  -j "${CPU_COUNT}"
        make install_lib MAXNODES=128 -j "${CPU_COUNT}"
        make install_lib MAXNODES=256 -j "${CPU_COUNT}"
        make install_lib MAXNODES=512 -j "${CPU_COUNT}"
        make install_lib MAXNODES=1024 -j "${CPU_COUNT}"
        make install_alib  -j "${CPU_COUNT}"
        make install_alib MAXNODES=128 -j "${CPU_COUNT}"
        make install_alib MAXNODES=256 -j "${CPU_COUNT}"
        make install_alib MAXNODES=512 -j "${CPU_COUNT}"
        make install_alib MAXNODES=1024 -j "${CPU_COUNT}"
        make clean
        cd ../../../
        tar -zcvf libMaBoSS-linux64.tar.gz MaBoSS/README.md MaBoSS/LICENSE MaBoSS/engine/src MaBoSS/engine/include MaBoSS/engine/lib
        
    - uses: actions/upload-artifact@v4
      if: github.event_name != 'release'
      with:
        name: libMaBoSS-linux64
        path: /home/runner/work/MaBoSS/libMaBoSS-linux64.tar.gz
        
    - uses: actions/upload-release-asset@v1
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: libMaBoSS-linux64.tar.gz
        asset_path: /home/runner/work/MaBoSS/libMaBoSS-linux64.tar.gz
        asset_content_type: application/gzip
  
  maboss_library_sbml:
    name: Building MaBoSS linux64 library with libSBML
    runs-on: ubuntu-22.04
    needs: [maboss, maboss_llvm, maboss_cmake, maboss_mpi, maboss_mpi_cmake]
    env:
      CC: gcc
      CXX: g++
      INSTALL_PATH: /usr/
      BUILD_PATH: /tmp/
      LIBXML_LIBDIR: /usr/lib/x86_64-linux-gnu/libxml2.so
      LIBXML_INCLUDEDIR: /usr/include/libxml2
      CPU_COUNT: 4
    # if: github.event.workflow_run.conclusion == 'success' && (github.ref == 'refs/heads/master' || github.event_name == 'release')

    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install flex bison
    
    - name: Cache compiled libSBML
      id: cache-libsbml-gcc
      uses: actions/cache@v4
      with:
        path: /tmp/libsbml-5.20.4
        key: ${{ runner.os }}-libSBML-5.20.4-gcc-namespace

    - name: Compiling libSBML
      if: steps.cache-libsbml-gcc.outputs.cache-hit != 'true'
      run: bash scripts/build_libsbml.sh

    - name: Install libSBML
      run: sudo env BUILD_PATH=/tmp/ bash scripts/install_libsbml.sh  
              
    - name: Build binary
      run: |
        rm -fr engine/pub/*
        cd engine/src
        make clean
        make install_lib SBML_COMPAT=1 -j "${CPU_COUNT}"
        make install_lib SBML_COMPAT=1 MAXNODES=128 -j "${CPU_COUNT}"
        make install_lib SBML_COMPAT=1 MAXNODES=256 -j "${CPU_COUNT}"
        make install_lib SBML_COMPAT=1 MAXNODES=512 -j "${CPU_COUNT}"
        make install_lib SBML_COMPAT=1 MAXNODES=1024 -j "${CPU_COUNT}"
        make install_alib SBML_COMPAT=1  -j "${CPU_COUNT}"
        make install_alib SBML_COMPAT=1 MAXNODES=128 -j "${CPU_COUNT}"
        make install_alib SBML_COMPAT=1 MAXNODES=256 -j "${CPU_COUNT}"
        make install_alib SBML_COMPAT=1 MAXNODES=512 -j "${CPU_COUNT}"
        make install_alib SBML_COMPAT=1 MAXNODES=1024 -j "${CPU_COUNT}"
        make clean
        cd ../../../
        tar -zcvf libMaBoSS-sbml-linux64.tar.gz MaBoSS/README.md MaBoSS/LICENSE MaBoSS/engine/src MaBoSS/engine/include MaBoSS/engine/lib
        
    - uses: actions/upload-artifact@v4
      if: github.event_name != 'release'
      with:
        name: libMaBoSS-sbml-linux64
        path: /home/runner/work/MaBoSS/libMaBoSS-sbml-linux64.tar.gz
        
    - uses: actions/upload-release-asset@v1
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: libMaBoSS-sbml-linux64.tar.gz
        asset_path: /home/runner/work/MaBoSS/libMaBoSS-sbml-linux64.tar.gz
        asset_content_type: application/gzip
        
  test_docker:
    name: Test Docker MaBoSS Server
    runs-on: ubuntu-22.04
    needs: [maboss, maboss_llvm, maboss_cmake, maboss_mpi, maboss_mpi_cmake]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install flex bison docker-compose
        pip install numpy
    - name: Cache Docker images.
      uses: ScribeMD/docker-cache@0.3.7
      with:
        key: docker-${{ runner.os }}-${{ github.run_id }}  
        
    - name: Start MaBoSS docker server
      run: |
        docker-compose up -d maboss-server
        bash -c "cd engine/src; make client"
        
    - name: Test MaBoSS docker server
      run: |
        bash -c "cd engine/tests; bash ./test-container.sh"
        
  publish_docker_hub:
    name: Docker MaBoSS Server
    runs-on: ubuntu-22.04
    needs: [test_docker]
    if: github.event_name == 'release' && github.event.action == 'created' && github.repository == 'sysbio-curie/MaBoSS'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache Docker images.
      uses: ScribeMD/docker-cache@0.3.7
      with:
        key: docker-${{ runner.os }}-${{ github.run_id }}

    - name: Connect Docker Hub
      run: |
        echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        
    - name: Upload Docker Hub
      run: | 
          docker tag maboss:latest maboss:${{ github.event.release.tag_name }}
          docker tag maboss:latest vnoel/maboss:latest
          docker tag maboss:${{ github.event.release.tag_name }} vnoel/maboss:${{ github.event.release.tag_name }}
          docker push vnoel/maboss:latest
          docker push vnoel/maboss:${{ github.event.release.tag_name }}
          docker tag maboss:latest sysbiocurie/maboss:latest
          docker tag maboss:${{ github.event.release.tag_name }} sysbiocurie/maboss:${{ github.event.release.tag_name }}
          docker push sysbiocurie/maboss:latest
          docker push sysbiocurie/maboss:${{ github.event.release.tag_name }}
            
  publish_docker_github:
    name: Publishing MaBoSS docker container to GitHub
    runs-on: ubuntu-22.04
    needs: [test_docker]
    if: github.event_name == 'release' && github.event.action == 'created' && github.repository == 'sysbio-curie/MaBoSS'
    
    env:
        REGISTRY: ghcr.io
        IMAGE_NAME: maboss

    permissions:
        contents: read
        packages: write
    steps:
    - uses: actions/checkout@v4
          
    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: containers/docker/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }},${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
        labels: ${{ steps.meta.outputs.labels }}
      

  test_apptainer:
    name: Apptainer MaBoSS
    runs-on: ubuntu-22.04
    needs: [maboss, maboss_llvm, maboss_cmake, maboss_mpi, maboss_mpi_cmake]
   
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        wget https://github.com/apptainer/apptainer/releases/download/v1.2.5/apptainer_1.2.5_amd64.deb
        sudo apt-get update
        sudo apt install -y ./apptainer_1.2.5_amd64.deb
        sudo apt-get install flex bison debootstrap
        pip install numpy
        
    - name: Start MaBoSS Apptainer
      run: |
        sudo apptainer build maboss.sif containers/apptainer/maboss.def
        singularity run maboss.sif &
        bash -c "cd engine/src; make client"
        
    - name: Test MaBoSS
      run: |
        bash -c "cd engine/tests; bash ./test-container.sh"
    
  maboss_conda_defaults:
    name: Build MaBoSS Anaconda package
    strategy:
      fail-fast: false
      matrix:
        repo: [
          {id: 0, name: "defaults", libsbml_package: "libsbml-plus-packages"}, 
          {id: 1, name: "conda-forge", libsbml_package: "libsbml"}
        ]
        
    runs-on: ubuntu-22.04

    needs: [maboss, maboss_llvm, maboss_cmake, maboss_mpi, maboss_mpi_cmake]
    
    defaults:
      run:
        shell: bash -el {0}

    steps:
    - uses: actions/checkout@v4
    - uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        conda-remove-defaults: "true"
        channels: ${{ matrix.repo.name }}
        python-version: 3.12
        use-mamba: true
        
    - name: Install conda-build
      run: |
        conda install conda-build anaconda-client conda-verify
      
    - name: Build Anaconda package
      env:
        CUSTOM_BUILD_NUMBER: ${{ matrix.repo.id }}
        LIBSBML_PACKAGE: ${{ matrix.repo.libsbml_package }}
      run: |
        conda build -c ${{ matrix.repo.name }} -c vincent-noel conda/maboss

    - name: Upload MaBoSS Ananconda package on vincent-noel
      run: |
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u vincent-noel /usr/share/miniconda/envs/test/conda-bld/linux-64/*.conda --force;
    
    - name: Upload MaBoSS Ananconda package on colomoto
      if: github.repository == 'sysbio-curie/MaBoSS' && github.event_name == 'release'
      run: |
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u colomoto /usr/share/miniconda/envs/test/conda-bld/linux-64/*.conda --force;
